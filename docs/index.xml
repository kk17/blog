<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Play</title>
    <link>https://blog.kk17.net/</link>
    <description>Recent content on Code Play</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Apr 2020 11:35:38 +0800</lastBuildDate>
    
        <atom:link href="https://blog.kk17.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Beginner&#39;s Learning Path to Machine Learning</title>
      <link>https://blog.kk17.net/post/the-beginners-learning-path-to-machine-learning/</link>
      <pubDate>Sun, 19 Apr 2020 11:35:38 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/the-beginners-learning-path-to-machine-learning/</guid>
      
        <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;In my work as a data engineer, I work closely together with data scientists. I am always interested in the major part of their work - building a model using machine learning. So I applied for a part-time master&amp;rsquo;s program in Artificial Intelligence that will start in August this year. Before this program start, I want to make some preparations for it. I decided to self teach some courses. So I spend about one month searching and collecting the resources about machine learning and draw this learning path. I am now following it this path and will try to keep update here.&lt;/p&gt;

&lt;h2 id=&#34;who-should-use-this-path&#34;&gt;Who should use this path&lt;/h2&gt;

&lt;p&gt;As I mentioned above, this path is used by me, can be useful to readers who have a background like me, a software engineer who does not have a machine learning or statistics background.  It is also suitable for university students (undergraduate or graduate) learning about machine learning. The requirement of this path is some basic python program skills. For those who want to learn python, the &lt;a href=&#34;https://towardsdatascience.com&#34;&gt;Towards Data Science&lt;/a&gt; blog &lt;a href=&#34;https://towardsdatascience.com/beginners-learning-path-for-machine-learning-5a7fb90f751a&#34;&gt;post&lt;/a&gt; offered an excellent guide.&lt;/p&gt;

&lt;h2 id=&#34;time-for-this-learning-path&#34;&gt;Time for this learning path&lt;/h2&gt;

&lt;p&gt;My plan is to try to use 8 to 9 months to finish this learning path. If anything changed, I would try to update it here. There is no perfect plan. A bad plan is better than no plan.&lt;/p&gt;

&lt;h2 id=&#34;mathematics-for-machine-learning&#34;&gt;Mathematics for Machine learning&lt;/h2&gt;

&lt;p&gt;Mathematics is the most scarred part for me in the pathway. After working for several years, I forget most of the mathematics I learn from college. So the first question is that do I need to learn mathematics again. My answer is yes. The open-source book &lt;a href=&#34;https://mml-book.github.io/&#34;&gt;Mathematics for Machine Learning&lt;/a&gt; provides the necessary mathematical skills for machine learning. Just a  glance about the first chapter of this book lets you know about how mathematics is used in machine learning. But my plan is not to dive into this book thoroughly, instead, I will try to learn these Python’s famous libraries Numpy, pandas, matplotlib first. If I run into a math problem, I will refer to the book or some other resources on the internet.&lt;/p&gt;

&lt;p&gt;The learning path for this part is to try to finish the first four chapters of the &lt;a href=&#34;https://github.com/jakevdp/PythonDataScienceHandbook&#34;&gt;Python Data Science Handbook&lt;/a&gt;, each chapter in one or two weeks. One of the fascinating parts of this book is that it is writing using Jupyter notebooks. It is so convenient that you can use Google Colab to view and run those notebooks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/work/notebooks/01.00-IPython-Beyond-Normal-Python.ipynb&#34;&gt;IPython: Beyond Normal Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/work/notebooks/02.00-Introduction-to-NumPy.ipynb&#34;&gt;Introduction to NumPy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/work/notebooks/03.00-Introduction-to-Pandas.ipynb&#34;&gt;Data Manipulation with Pandas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colab.research.google.com/github/jakevdp/PythonDataScienceHandbook/blob/master/notebooks/work/notebooks/04.00-Introduction-To-Matplotlib.ipynb&#34;&gt;Visualization with Matplotlib&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just reading the book is not enough. Practicing is the only ways to make you really master these libraries. I found some related quiz notebooks are very helpful. It is recommended to practice these quizzes while reading the book.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rougier/numpy-100&#34;&gt;rougier/numpy-100: 100 numpy exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ajcr/100-pandas-puzzles&#34;&gt;ajcr/100-pandas-puzzles: 100 data puzzles for pandas, ranging from short and simple to super tricky&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.machinelearningplus.com/plots/top-50-matplotlib-visualizations-the-master-plots-python/&#34;&gt;Top 50 matplotlib Visualizations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DunderData/Quizzes&#34;&gt;DunderData/Quizzes: Python, Pandas, and Scikit-Learn Quizzes and Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Microsoft&amp;rsquo;s &lt;a href=&#34;https://www.edx.org/course/essential-math-for-machine-learning-python-edition-3&#34;&gt;Essential Math for Machine Learning: Python Edition&lt;/a&gt; on edx.org is one of the MOOC course I want to try after finished learning these libraries.&lt;/p&gt;

&lt;h2 id=&#34;machine-learning&#34;&gt;Machine Learning&lt;/h2&gt;

&lt;p&gt;There are many MOOC courses about machine learning on the internet. It is good to do some researches about the courses you may want to learn and select the most suitable for you. For me, I mainly deep researched about two courses:
&lt;a href=&#34;https://www.coursera.org/learn/machine-learning&#34;&gt;Machine Learning by Andrew Ng&lt;/a&gt; on Coursera and Machine Learning serials by Prof. Hsuan-Tien Lin:&lt;a href=&#34;https://www.coursera.org/learn/ntumlone-mathematicalfoundations&#34;&gt;Mathematical Foundations&lt;/a&gt;, &lt;a href=&#34;https://www.coursera.org/learn/ntumlone-algorithmicfoundations&#34;&gt;Algorithmic Foundations&lt;/a&gt;, &lt;a href=&#34;https://www.coursera.org/learn/machine-learning-techniques&#34;&gt;Techniques&lt;/a&gt; on Coursera.
Andrew&amp;rsquo;s course is well known. It teaches from very basic concepts to advanced concepts, and it is a very comprehensive course for beginners.
but it is taught in octave/Matlab, which may be a little outdated.&lt;/p&gt;

&lt;p&gt;Prof. Hsuan-Tien Lin&amp;rsquo;s courses are more updated and are organized in a when-why-how structure, which I think provides a more insightful view about machine learning. But these courses are taught in Chinese. Maybe it will be a problem for some people. The total length of these course on Coursera are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mathematical Foundations: 16 hours in 8 weeks&lt;/li&gt;
&lt;li&gt;Algorithmic Foundations: 13 hours in 8 weeks&lt;/li&gt;
&lt;li&gt;Techniques: 64 hours in 16 weeks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to focus on the Prof. Hsuan-Tien Lin&amp;rsquo;s courses while using Andrew&amp;rsquo;s course as a reference.&lt;/p&gt;

&lt;p&gt;Some notes about these courses share by others are also helpful, but they are also in Chinese.
- &lt;a href=&#34;https://github.com/fengdu78/Coursera-ML-AndrewNg-Notes&#34;&gt;fengdu78/Coursera-ML-AndrewNg-Notes: 吴恩达老师的机器学习课程个人笔记&lt;/a&gt;
- &lt;a href=&#34;https://wizardforcel.gitbooks.io/ntu-hsuantienlin-ml/content/&#34;&gt;台湾大学林轩田机器学习笔记 · 台湾大学林轩田机器学习笔记&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;deep-learning&#34;&gt;Deep Learning&lt;/h2&gt;

&lt;p&gt;I am not going to include deep learning in this learn path. When I finished this pathway, I will create a particular learning path for deep learning.&lt;/p&gt;

&lt;h2 id=&#34;other-resources&#34;&gt;Other resources&lt;/h2&gt;

&lt;p&gt;There are other resources that I found that may help.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/donnemartin/data-science-ipython-notebooks&#34;&gt;donnemartin/data-science-ipython-notebooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yanshengjia/ml-road&#34;&gt;yanshengjia/ml-road: Machine Learning Resources, Practice and Research&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/beginners-learning-path-for-machine-learning-5a7fb90f751a&#34;&gt;Beginners Learning Path for Machine Learning - Towards Data Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@youngladesh/absolute-beginners-guide-to-machine-learning-and-deep-learning-7fa032944047&#34;&gt;Absolute Beginner’s Guide to Machine Learning and Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Diving Into Airflow Scheduler</title>
      <link>https://blog.kk17.net/post/diving-into-airflow-scheduler/</link>
      <pubDate>Fri, 26 Jul 2019 10:02:55 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/diving-into-airflow-scheduler/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;../understand-airflow&#34;&gt;Last article&lt;/a&gt; we told about the basic concepts and architecture of Airflow, and we knew that Airflow has three major components:  &lt;code&gt;webserver&lt;/code&gt;,  &lt;code&gt;scheduler&lt;/code&gt; and &lt;code&gt;executor.&lt;/code&gt;  This article will talk about the detail of the &lt;code&gt;scheduler&lt;/code&gt; by diving into some of the source code(version: 1.10.1).&lt;/p&gt;

&lt;h2 id=&#34;key-concept&#34;&gt;Key Concept&lt;/h2&gt;

&lt;p&gt;We already told about the key concepts of Airflow, let&amp;rsquo;s recap some concepts use in airflow scheduler here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dag Files: Python files that could contain DAGs. A DAG can be definite in a single python file or in multiple python files packaged into an egg file.&lt;/li&gt;
&lt;li&gt;Dag (Directed Acyclic Graph): a workflow which glues all the tasks with inter-dependencies.&lt;/li&gt;
&lt;li&gt;Task: a parameterized instance of an operator/sensor which represents a unit of actual work to be executed.&lt;/li&gt;
&lt;li&gt;DagRun:  an object representing an instantiation of the DAG in time.&lt;/li&gt;
&lt;li&gt;TaskInstance: an object representing an instantiation of the Task in time.&lt;/li&gt;
&lt;li&gt;DagBag: a collection of dags, parsed out of a folder tree and has high
level configuration settings, like what database to use as a backend and
what executor to use to fire off tasks.&lt;/li&gt;
&lt;li&gt;Job: Jobs are processing items with state
and duration that aren&amp;rsquo;t task instances. There are three types of job in Airflow: ScheduleJob, LocalTaskJob, and BackfillJob.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;process-loop&#34;&gt;Process Loop&lt;/h2&gt;

&lt;p&gt;The Airflow scheduler is designed to run as a persistent service in an Airflow production environment. To kick it off, all you need to do is execute &lt;code&gt;airflow scheduler&lt;/code&gt; command. Let&amp;rsquo;s look at how Airflow parses this command and start the process loop.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kk17.net/process_loop_outer/process_loop_outer.svg&#34; alt=&#34;process_loop_outer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Firstly, airflow use &lt;code&gt;argparse&lt;/code&gt; to parse the command and invoke the &lt;code&gt;scheduler&lt;/code&gt; function in &lt;code&gt;airflow.bin.cli&lt;/code&gt;. And then &lt;code&gt;scheduler&lt;/code&gt; function creates a ScheduleJob and run its &lt;code&gt;run&lt;/code&gt; method. The ScheduleJob will save itself to the database, start the executor and create a &lt;code&gt;DagFileProcessorManager&lt;/code&gt;. Eventually, the ScheduleJob will run a loop to invoke the &lt;code&gt;processor_manager periodically .heartbeat&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;All the daemon service of Airflow are started by running &lt;code&gt;airflow {serve_name}&lt;/code&gt; command. Basically, the &lt;code&gt;airflow&lt;/code&gt; command is a python command-line script. We can look at the source code to know how it starts the service.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/bin/airflow#L20&#34;&gt;airflow/bin/airflow&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;airflow.bin.cli&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;import&lt;/span&gt; CLIFactory

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;__name__&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    parser &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; CLIFactory&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_parser()
    args &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; parser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parse_args()
    args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;func(args)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/bin/cli.py#L1247&#34;&gt;airflow/bin/cli.py#CLIFactory&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CLIFactory&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;object&lt;/span&gt;):
    args &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;dag_id&amp;#39;&lt;/span&gt;: Arg((&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;dag_id&amp;quot;&lt;/span&gt;,), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The id of the dag&amp;quot;&lt;/span&gt;),
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;task_id&amp;#39;&lt;/span&gt;: Arg((&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;task_id&amp;quot;&lt;/span&gt;,), &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;The id of the task&amp;quot;&lt;/span&gt;),
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    },
    subparsers &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (
      &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
      {
          &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;func&amp;#39;&lt;/span&gt;: scheduler,
          &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;help&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Start a scheduler instance&amp;quot;&lt;/span&gt;,
          &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;args&amp;#39;&lt;/span&gt;: (&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;dag_id_opt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;subdir&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;run_duration&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;num_runs&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;do_pickle&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;pid&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;daemon&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;stdout&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;stderr&amp;#39;&lt;/span&gt;,
                   &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;log_file&amp;#39;&lt;/span&gt;),
      },
      &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    )
    subparsers_dict &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {sp[&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;func&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;__name__&lt;/span&gt;: sp &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; sp &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; subparsers}
    dag_subparsers &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; (
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;list_tasks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;backfill&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;run&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;pause&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;unpause&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two important mappings in the &lt;code&gt;CLIFactory&lt;/code&gt;, &lt;code&gt;args&lt;/code&gt; maps the command line arguments to some default value and help information. &lt;code&gt;subparsers_dict&lt;/code&gt; maps the subcommand to objective python function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/bin/cli.py#L903&#34;&gt;airflow/bin/cli.py#scheduler&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@cli_utils.action_logging&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;scheduler&lt;/span&gt;(args):
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;print&lt;/span&gt;(settings&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;HEADER)
    job &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; jobs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SchedulerJob(
        dag_id&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id,
        subdir&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;process_subdir(args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;subdir),
        run_duration&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run_duration,
        num_runs&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;num_runs,
        do_pickle&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;do_pickle)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; args&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;daemon:
        pid, stdout, stderr, log_file &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; setup_locations(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;scheduler&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        ctx &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; daemon&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;DaemonContext(
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;with&lt;/span&gt; ctx:
            job&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run()
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        job&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L191&#34;&gt;airflow/jobs.py#ScheduleJob.run&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;):
    Stats&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;incr(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;__class__&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;__name__&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;lower() &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;_start&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;)
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Adding an entry in the DB&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;with&lt;/span&gt; create_session() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; session:
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;RUNNING
        session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;)
        session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;commit()
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_execute()
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# In case of max runs or max duration&lt;/span&gt;
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SUCCESS
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #D2413A; font-weight: bold&#34;&gt;SystemExit&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;finally&lt;/span&gt;:
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;end_date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow()
            session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;merge(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;)
            session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;commit()
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;_execute&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;):
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color: #D2413A; font-weight: bold&#34;&gt;NotImplementedError&lt;/span&gt;(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;This method needs to be overridden&amp;quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can know that the scheduler service is actually an &lt;code&gt;airflow.jobs.SchedulerJob&lt;/code&gt; instance that runs its &lt;code&gt;run&lt;/code&gt; method. It will add itself into the database &lt;code&gt;job&lt;/code&gt; table and then run the &lt;code&gt;_execute&lt;/code&gt; helper method handling some and normal exit situations. Now let us look at the &lt;code&gt;_execute&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L1544&#34;&gt;airflow/jobs.py#ScheduleJob._execute&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;_execute&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;):
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Use multiple processes to parse and generate tasks for the&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# DAGs in parallel. By processing them in separate processes,&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# we can get parallelism and isolation from potentially harmful&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# user code.&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Build up a list of Python files that could contain DAGs&lt;/span&gt;
    known_file_paths &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; list_py_file_paths(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;subdir)

    processor_manager &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; DagFileProcessorManager(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;subdir,
                                                known_file_paths,
                                                &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max_threads,
                                                &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file_process_interval,
                                                &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file_process_interval,
                                                processor_factory)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_execute_helper(processor_manager)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;finally&lt;/span&gt;:
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Exited execute loop&amp;quot;&lt;/span&gt;)

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Kill all child processes on exit since we don&amp;#39;t want to leave&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# them as orphaned.&lt;/span&gt;
        pids_to_kill &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; processor_manager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_all_pids()
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see that &lt;code&gt;_execute&lt;/code&gt; method create a &lt;code&gt;processor_manager&lt;/code&gt; and the &lt;code&gt;processor_manager&lt;/code&gt; use &lt;code&gt;processor_factory&lt;/code&gt; to create a processor for each dag file_path. We can also find out it uses configurations which configured in the &lt;code&gt;airflow.cfg&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;file_process_interval&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;min_file_process_interval&amp;#39;&lt;/span&gt;),
&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;heartrate &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;SCHEDULER_HEARTBEAT_SEC&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max_threads &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;max_threads&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# How often to scan the DAGs directory for new files. Default to 5 minutes.&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_dir_list_interval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;dag_dir_list_interval&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# How often to print out DAG file processing stats to the log. Default to&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# 30 seconds.&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;print_stats_interval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;print_stats_interval&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Parse and schedule each file no faster than this interval. Default&lt;/span&gt;
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# to 3 minutes.&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file_process_interval &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; file_process_interval

&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max_tis_per_query &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;max_tis_per_query&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; run_duration &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;:
    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run_duration &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;scheduler&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;run_duration&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then the &lt;code&gt;_execute&lt;/code&gt; method run the &lt;code&gt;_execute_helper&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/a.irflow/jobs.py#L1627&#34;&gt;airflow/jobs.py#ScheduleJob._execute_helper&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;_execute_helper&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, processor_manager):
    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;executor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;start()

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;## self.log.info(&amp;quot;Resetting orphaned tasks for active dag runs&amp;quot;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;reset_state_for_orphaned_tasks()

    execute_start_time &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow()

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Use this value initially&lt;/span&gt;
    known_file_paths &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; processor_manager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file_paths


    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# For the execute duration, parse and schedule DAGs&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow() &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; execute_start_time)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;total_seconds() &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run_duration &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;run_duration &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;:
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Starting Loop...&amp;quot;&lt;/span&gt;)

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; elapsed_time_since_refresh &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_dir_list_interval:
                    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Build up a list of Python files that could contain DAGs&lt;/span&gt;
                    known_file_paths &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; list_py_file_paths(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;subdir)
                    last_dag_dir_refresh_time &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow()
                    processor_manager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;set_file_paths(known_file_paths)
                    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;clear_nonexistent_import_errors    (known_file_paths&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;known_file_paths)

        simple_dags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; processor_manager&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;heartbeat()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;_execute_helper&lt;/code&gt; starts the &lt;code&gt;executor&lt;/code&gt; and run the &lt;code&gt;processor_manager.heartbeat()&lt;/code&gt; in a loop with the configured &lt;code&gt;dag_dir_list_interval&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;dagfileprocessormanager-heartbeat&#34;&gt;DagFileProcessorManager Heartbeat&lt;/h2&gt;

&lt;p&gt;As fast as we know, the &lt;code&gt;processor_manager.heartbeat&lt;/code&gt; is the most important method in the process loop, so let&amp;rsquo;s dive into it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kk17.net/process_loop_inner/process_loop_inner.svg&#34; alt=&#34;process_loop_inner&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;processor_manager&lt;/code&gt; actually maintains a list of DagFileProcessor(&lt;em&gt;don&amp;rsquo;t know how to present this list in the UML sequence diagram&lt;/em&gt;) to process the dag files. The max size of the processor list is configured in the &lt;code&gt;airflow.cfg&lt;/code&gt; -&amp;gt; &lt;code&gt;scheduler&lt;/code&gt;-&amp;gt; &lt;code&gt;max_threads&lt;/code&gt;. In the &lt;code&gt;heartbeat&lt;/code&gt; method, the &lt;code&gt;processor_manager.heartbeat&lt;/code&gt; kick off new &lt;code&gt;DagFileProcessor&lt;/code&gt; and &lt;code&gt;DagFileProcessor&lt;/code&gt; kick off new &lt;code&gt;multiprocessing. Process&lt;/code&gt; to process DAG definition files and read the results from the finished processors. One process corresponds to one &lt;code&gt;SchedulerJob&lt;/code&gt; instance. When the process started, it use &lt;code&gt;scheduler_job.process_file&lt;/code&gt; method to process the DAG files and stores the result into a queue. The &lt;code&gt;processor_manager&lt;/code&gt; collects all the results that were produced by processors that have finished since the last time this was called. it also starts more processors if necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/utils/dag_processing.py#L473&#34;&gt;airflow/utils/dag_processing.py#DagFileProcessorManager.heartbeat&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;heartbeat&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;):
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# get finished_processors and running_processors&lt;/span&gt;
    finished_processors &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {}
    running_processors &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {}
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; file_path, processor &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_processors&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;items():
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; processor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;done:
            &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
            finished_processors[file_path] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; processor
            &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
            running_processors[file_path] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; processor
    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_processors &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; running_processors

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Collect all the DAGs that were found in the processed files&lt;/span&gt;
    simple_dags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; file_path, processor &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; finished_processors&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;items():
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; processor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;result &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;:
            &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; simple_dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; processor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;result:
                simple_dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(simple_dag)

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Generate more file paths to process if we processed all the files&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# already.&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Start more processors if we have enough slots and files to process&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_parallelism &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_processors) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;    (&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_file_path_queue) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;):
        file_path &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_file_path_queue&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;pop(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
        processor &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_processor_factory(file_path)

        processor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;start()
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_processors[file_path] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; processor
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Update scheduler heartbeat count.&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; simple_dags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L301&#34;&gt;airflow/jobs.py#DagFileProcessor&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DagFileProcessor&lt;/span&gt;(AbstractDagFileProcessor, LoggingMixin):
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;_launch_process&lt;/span&gt;(result_queue,&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;):
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;helper&lt;/span&gt;()
            scheduler_job &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; SchedulerJob(dag_ids&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;dag_id_white_list, log&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;log)
            result &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; scheduler_job&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;process_file(file_path, pickle_dags)
            result_queue&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;put(result)
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        p &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; multiprocessing&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;Process(target&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;helper,
                                    args&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(),
                                    name&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;{}-Process&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(thread_name))
        p&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;start()
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; p
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;start&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;):
        &lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        Launch the process and start processing the DAG.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_process &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; DagFileProcessor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_launch_process(
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_result_queue,
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file_path,
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_pickle_dags,
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_dag_id_white_list,
            &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;DagFileProcessor{}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_instance_id))
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_start_time &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;schedulejob-process-file&#34;&gt;ScheduleJob Process File&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s keep diving into the &lt;code&gt;scheduler_job.process_file&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kk17.net/process_file/process_file.svg&#34; alt=&#34;process_file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;scheduler_job.process_file&lt;/code&gt; method first creates a &lt;code&gt;DagBag&lt;/code&gt; instance for the dag file path. In the &lt;code&gt;DagBag&lt;/code&gt; instance initiation, it loads the python modules in the file path using different std lib base on whether the path is a zip path.
After modules are loaded, &lt;code&gt;DagBag&lt;/code&gt; collects all the DAGs in the modules.
ScheduleJob then gets all dags from &lt;code&gt;DagBag&lt;/code&gt;, sync their states db and collect those dags which are not paused.&lt;/p&gt;

&lt;p&gt;ScheduleJob iterates over all the un-paused dags and processes them. Processing includes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Calculate &lt;code&gt;next_run_date&lt;/code&gt; for dag and create appropriate &lt;code&gt;DagRun(s)&lt;/code&gt; in the DB.&lt;/li&gt;
&lt;li&gt;Create appropriate &lt;code&gt;TaskInstance(s)&lt;/code&gt; in the DB for new &lt;code&gt;DagRuns&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Find all active &lt;code&gt;DagRuns&lt;/code&gt; for a dag and iterate over their unscheduled &lt;code&gt;TaskInstances&lt;/code&gt;. If the dependencies of a &lt;code&gt;TaskInstance&lt;/code&gt; is met, update the state of the &lt;code&gt;TaskInstance&lt;/code&gt; to SCHEDULED.&lt;/li&gt;
&lt;li&gt;Send emails for tasks that have missed SLAs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L1771&#34;&gt;airflow/jobs.py#ScheduleJob.process_file&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;process_file&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, file_path, pickle_dags&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;False&lt;/span&gt;, session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;):
    simple_dags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        dagbag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;DagBag(file_path)
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #D2413A; font-weight: bold&#34;&gt;Exception&lt;/span&gt;:
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; []
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Save individual DAGs in the ORM and update DagModel.last_scheduled_time&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;values():
        dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sync_to_db()

    paused_dag_ids &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;values() &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;is_paused]

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Pickle the DAGs (if necessary) and put them into a SimpleDag&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag_id &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dags:
        dag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_dag(dag_id)
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Only return DAGs that are not paused&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag_id &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; paused_dag_ids:
            simple_dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(SimpleDag(dag, pickle_id&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;pickle_id))

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_ids) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;:
        dags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [dag &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;values()
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_ids &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt;
                dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; paused_dag_ids]
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
        dags &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [dag &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;values()
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parent_dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt;
                dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; paused_dag_ids]

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Not using multiprocessing.Queue() since it&amp;#39;s no longer a separate&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# process and due to some unusual behavior. (empty() incorrectly&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# returns true?)&lt;/span&gt;
    ti_keys_to_schedule &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_process_dags(dagbag, dags, ti_keys_to_schedule)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ti_key &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; ti_keys_to_schedule:
        dag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dagbag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dags[ti_key[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;]]
        task &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_task(ti_key[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;])
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# NOTE: create TaskInstance&lt;/span&gt;
        ti &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; models&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;TaskInstance(task, ti_key[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;])
        ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;refresh_from_db(session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session, lock_for_update&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        dep_context &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; DepContext(deps&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;QUEUE_DEPS, ignore_task_deps&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;)
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;are_dependencies_met(
                dep_context&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;dep_context,
                session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session,
                verbose&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;):
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Task starts out in the scheduled state. All tasks in the&lt;/span&gt;
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# scheduled state will be sent to the executor&lt;/span&gt;
            ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;SCHEDULED

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Also save this task instance to the DB.&lt;/span&gt;
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Creating / updating &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt; in ORM&amp;quot;&lt;/span&gt;, ti)
        session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;merge(ti)
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# commit batch&lt;/span&gt;
    session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;commit()

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Record import errors into the ORM&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# kill_zombies&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; simple_dags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/models/__init__.py#L265&#34;&gt;airflow/models/__init__.py#DagBag.process_file&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;process_file&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, filepath, only_if_updated&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;, safe_mode&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;):
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        mods &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
        is_zipfile &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; zipfile&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;is_zipfile(filepath)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; is_zipfile:
            &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
            org_mod_name, _ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;splitext(os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;split(filepath)[&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;])
            mod_name &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;with&lt;/span&gt; timeout(configuration&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;conf&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getint(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;DAGBAG_IMPORT_TIMEOUT&amp;quot;&lt;/span&gt;)):
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
                    m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; imp&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;load_source(mod_name, filepath)
                    mods&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(m)
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #D2413A; font-weight: bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
                    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
            zip_file &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; zipfile&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ZipFile(filepath)
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; mod &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; zip_file&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;infolist():
                head, _ &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;split(mod&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;filename)
                mod_name, ext &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;splitext(mod&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;filename)
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; head &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; (ext &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;.py&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;or&lt;/span&gt; ext &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;.pyc&amp;#39;&lt;/span&gt;):
                    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
                        sys&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;insert(&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;, filepath)
                        m &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; importlib&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;import_module(mod_name)
                        mods&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(m)
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #D2413A; font-weight: bold&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;as&lt;/span&gt; e:
                        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; mods:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;list&lt;/span&gt;(m&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;__dict__&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;values()):
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;isinstance&lt;/span&gt;(dag, DAG):
                    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt;:
                        dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;is_subdag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;False&lt;/span&gt;
                        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;bag_dag(dag, parent_dag&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;dag, root_dag&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;dag)
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;isinstance&lt;/span&gt;(dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_schedule_interval, six&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;string_types):
                            croniter(dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_schedule_interval)
                        found_dags&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(dag)
                        found_dags &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;subdags
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;file_last_changed[filepath] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; file_last_changed_on_disk
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; found_dags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L1398&#34;&gt;airflow/jobs.py#ScheduleJob._process_dags&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;_process_dags&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, dagbag, dags, tis_out):
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dag &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dags:
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
        dag_run &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_dag_run(dag)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag_run:
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Created &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;, dag_run)
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_process_task_instances(dag, tis_out)
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;manage_slas(dag)

    models&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;DagStat&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;update([d&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; d &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dags])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L783&#34;&gt;airflow/jobs.py#ScheduleJob.create_dag_run&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;create_dag_run&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, dag, session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    This method checks whether a new DagRun needs to be created&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    for a DAG based on scheduling interval&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    Returns DagRun if one is scheduled. Otherwise returns None.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schedule_interval:
        active_runs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; DagRun&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;find(&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;)
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# return if already reached maximum active runs and no timeout setting&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(active_runs) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max_active_runs &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dagrun_timeout:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;
        timedout_runs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; dr &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; active_runs:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; (dr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;start_date &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dagrun_timeout &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; dr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;start_date &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow() &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dagrun_timeout):
                dr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;FAILED
                dr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;end_date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow()
                dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;handle_callback(dr, success&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;False&lt;/span&gt;, reason&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;dagrun_timeout&amp;#39;&lt;/span&gt;,  dsession&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session)
                timedout_runs &lt;span style=&#34;color: #666666&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;
        session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;commit()
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(active_runs) &lt;span style=&#34;color: #666666&#34;&gt;-&lt;/span&gt; timedout_runs &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max_active_runs:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# this query should be replaced by find dagrun&lt;/span&gt;
        last_scheduled_run &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; session&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;query(func&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max(DagRun&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;execution_date))&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;filter_by(&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;scalar()

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# don&amp;#39;t schedule @once again&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schedule_interval &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;@once&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; last_scheduled_run:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# don&amp;#39;t do scheduler catchup for dag&amp;#39;s that don&amp;#39;t have dag.catchup = True&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; (dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;catchup &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;or&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schedule_interval &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;@once&amp;#39;&lt;/span&gt;):
            &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
            dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;start_date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# next_schedule_time_before_now&lt;/span&gt;

        next_run_date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;not&lt;/span&gt; last_scheduled_run:
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# First run&lt;/span&gt;
            next_run_date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# minimal start_time of dag tasks&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;:
            next_run_date &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;following_schedule(last_scheduled_run)

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# make sure backfills are also considered&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# don&amp;#39;t ever schedule prior to the dag&amp;#39;s start_date&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# don&amp;#39;t ever schedule in the future&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# this structure is necessary to avoid a TypeError from concatenating&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# NoneType&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schedule_interval &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;@once&amp;#39;&lt;/span&gt;:
            period_end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; next_run_date
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;elif&lt;/span&gt; next_run_date:
            period_end &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;following_schedule(next_run_date)

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Don&amp;#39;t schedule a dag beyond its end_date (as specified by the dag param)&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; next_run_date &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;end_date &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; next_run_date &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;end_date:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Don&amp;#39;t schedule a dag beyond its end_date (as specified by the task params)&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Get the min task end date, which may come from the dag.default_args&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; next_run_date &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; period_end &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;and&lt;/span&gt; period_end &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;=&lt;/span&gt; timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow():
            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# create a dagrun and save it to db&lt;/span&gt;
            next_run &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;create_dagrun(
                run_id&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;DagRun&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;ID_PREFIX &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; next_run_date&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;isoformat(),
                execution_date&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;next_run_date,
                start_date&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;timezone&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;utcnow(),
                state&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;RUNNING,
                external_trigger&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;False&lt;/span&gt;
            )
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; next_run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/blob/1.10.1/airflow/jobs.py#L914&#34;&gt;airflow/jobs.py##ScheduleJob._process_task_instances&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #AA22FF&#34;&gt;@provide_session&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;_process_task_instances&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, dag, queue, session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;None&lt;/span&gt;):
    &lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    This method schedules the tasks for a single DAG by looking at the&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    active DAG runs and adding task instances that should run to the&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    queue.&lt;/span&gt;
&lt;span style=&#34;color: #BA2121; font-style: italic&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# update the state of the previously active dag runs&lt;/span&gt;
    dag_runs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; DagRun&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;find(dag_id&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag_id, state&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;RUNNING, session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session)
    active_dag_runs &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; []
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; run &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; dag_runs:
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Examining DAG run &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;, run)
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# don&amp;#39;t consider runs that are executed in the future&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;len&lt;/span&gt;(active_dag_runs) &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;max_active_runs:
            &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Active dag runs &amp;gt; max_active_run.&amp;quot;&lt;/span&gt;)
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# skip backfill dagruns for now as long as they are not really scheduled&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; run&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;is_backfill:
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;continue&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# todo: run.dag is transient but needs to be set&lt;/span&gt;
        run&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;dag &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dag
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# todo: preferably the integrity check happens at dag collection time&lt;/span&gt;
        run&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;verify_integrity(session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session)
        run&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;update_state(session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session)
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; run&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;state &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;RUNNING:
            make_transient(run)
            active_dag_runs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(run)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; run &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; active_dag_runs:
        &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Examining active DAG run: &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;, run)
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# this needs a fresh session sometimes tis get detached&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# Get a set of task instance related to this task for a specific date range.&lt;/span&gt;
        tis &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; run&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_task_instances(state&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;(State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;NONE, State&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;UP_FOR_RETRY))

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# this loop is quite slow as it uses are_dependencies_met for&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# every task (in ti.is_runnable). This is also called in&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# update_state above which has already checked these tasks&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; ti &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; tis:
            task &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; dag&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_task(ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;task_id)

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# fixme: ti.task is transient but needs to be set&lt;/span&gt;
            ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;task &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; task

            &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# future: remove adhoc&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; task&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;adhoc:
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;continue&lt;/span&gt;

            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;are_dependencies_met(
                    dep_context&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;DepContext(flag_upstream_failed&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;),
                    session&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;session):
                &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;debug(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;Queuing task: &lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;&lt;/span&gt;, ti)
                queue&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;append(ti&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;key)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The Airflow scheduler spins up a process loop, which monitors and stays in sync with a folder for all DAG objects it may contain, and periodically (every minute or so) collects DAG parsing results and inspects active tasks to see whether they can be scheduled.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://airflow.apache.org/scheduler.html&#34;&gt;Scheduling &amp;amp; Triggers — Airflow Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Understand Airflow</title>
      <link>https://blog.kk17.net/post/understand-airflow/</link>
      <pubDate>Wed, 24 Jul 2019 14:24:49 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/understand-airflow/</guid>
      
        <description>&lt;h2 id=&#34;key-concepts&#34;&gt;Key concepts&lt;/h2&gt;

&lt;p&gt;For context around the terms used in this blog post, here are a few key concepts for Airflow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DAG&lt;/strong&gt; (Directed Acyclic Graph): a workflow which glues all the tasks with inter-dependencies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operator&lt;/strong&gt;: a template for a specific type of work to be executed. For example, BashOperator represents how to execute a bash script, while PythonOperator represents how to execute a python function, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensor&lt;/strong&gt;: a type of special operator which will only execute if a certain condition is met.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Task&lt;/strong&gt;: a parameterized instance of an operator/sensor which represents a unit of actual work to be executed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin&lt;/strong&gt;: an extension to allow users to easily extend Airflow with various custom hooks, operators, sensors, macros, and web views.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pools&lt;/strong&gt;: concurrency limit configuration for a set of Airflow tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Connections&lt;/em&gt;&lt;/strong&gt; to define any external DB, FTP etc. connection’s authentication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Variables&lt;/em&gt;&lt;/strong&gt; to store and retrieve arbitrary content or settings as a simple key value.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;XCom&lt;/em&gt;&lt;/strong&gt; to share keys/values between independent tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pools&lt;/strong&gt; to limit the execution parallelism on arbitrary sets of tasks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hooks&lt;/strong&gt; to reach external platforms and databases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/1400/1*N2CWqwBZiulBUwiPprKg4g.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure 3.2 Screenshots from the Airflow UI, Representing the example workflow DAG. Top Subpanel&lt;/strong&gt;: The Graph View of the &lt;code&gt;DagRun&lt;/code&gt; for Jan. 25th. Dark green nodes indicate &lt;code&gt;TaskInstance&lt;/code&gt;s with “success” states. The light green node depicts a &lt;code&gt;TaskInstance&lt;/code&gt; in the “running” state. &lt;strong&gt;Bottom Subpanel&lt;/strong&gt;: The Tree View of the &lt;code&gt;example_workflow&lt;/code&gt; DAG. The main components of Airflow are highlighted in screenshot, including Sensors, Operators, Tasks, &lt;code&gt;DagRuns&lt;/code&gt;, and &lt;code&gt;TaskInstances&lt;/code&gt;. &lt;code&gt;DagRuns&lt;/code&gt; are represented as columns in the graph view — the &lt;code&gt;DagRun&lt;/code&gt; for Jan. 25th is outlined in cyan. Each square in the graph view represents a &lt;code&gt;TaskInstance&lt;/code&gt; — the &lt;code&gt;TaskInstance&lt;/code&gt; for the (“running”) &lt;code&gt;perform_currency_conversion&lt;/code&gt; task on Jan. 25th is outlined in blue.&lt;/p&gt;

&lt;h2 id=&#34;airflow-architecture&#34;&gt;Airflow architecture&lt;/h2&gt;

&lt;p&gt;The following diagram shows the typical components of Airflow architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2019/04/17/sagemaker-airflow-2.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Scheduler:&lt;/em&gt;&lt;/strong&gt; The scheduler is a persistent service that monitors DAGs and tasks, and triggers the task instances whose dependencies have been met. The scheduler is responsible for invoking the executor defined in the Airflow configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Executor:&lt;/em&gt;&lt;/strong&gt; Executors are the mechanism by which task instances get to run. Airflow by default provides different types of executors, and you can define custom executors, such as a Kubernetes executor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Broker:&lt;/em&gt;&lt;/strong&gt; The broker queues the messages (task requests to be executed) and acts as a communicator between the executor and the workers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Workers:&lt;/em&gt;&lt;/strong&gt; The actual nodes where tasks are executed and that return the result of the task.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Web server:&lt;/em&gt;&lt;/strong&gt; A webserver to render the Airflow UI.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Configuration file:&lt;/em&gt;&lt;/strong&gt; Configure settings such as executor to use, Airflow metadata database connections, DAG, and repository location. You can also define concurrency and parallelism limits, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Metadata database:&lt;/em&gt;&lt;/strong&gt; Database to store all the metadata related to the DAGS, DAG runs, tasks, variables, and connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;reference-and-further-reading&#34;&gt;Reference and Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/cn/blogs/machine-learning/build-end-to-end-machine-learning-workflows-with-amazon-sagemaker-and-apache-airflow/&#34;&gt;Build end-to-end machine learning workflows with Amazon SageMaker and Apache Airflow | AWS Machine Learning Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eng.lyft.com/running-apache-airflow-at-lyft-6e53bb8fccff&#34;&gt;Running Apache Airflow At Lyft - Lyft Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@dustinstansbury/understanding-apache-airflows-key-concepts-a96efed52b1a&#34;&gt;Understanding Apache Airflow’s key concepts - Dustin Stansbury - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Spark Run Mode and Application Deployment Mode</title>
      <link>https://blog.kk17.net/post/spark-run-mode-and-application-deployment-mode/</link>
      <pubDate>Tue, 16 Jul 2019 19:31:49 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/spark-run-mode-and-application-deployment-mode/</guid>
      
        <description>

&lt;p&gt;Spark running mode is often be confused with application deploy mode.&lt;/p&gt;

&lt;h2 id=&#34;spark-running-mode&#34;&gt;Spark Running Mode&lt;/h2&gt;

&lt;p&gt;Spark can run on a single local machine or on a cluster manager like Mesos or YARN to leverage the resources(memory, CPU, and so on) across the cluster.&lt;/p&gt;

&lt;h3 id=&#34;run-locally&#34;&gt;Run Locally&lt;/h3&gt;

&lt;p&gt;In local mode, spark jobs run on a single machine and are executed in parallel using multi-threading: this restricts parallelism to (at most) the number of cores in your machine.
The local mode can be enabled by setting the [master url][master-url] to &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;local[x]&lt;/code&gt;. The biggest advantage of the local mode is that you don&amp;rsquo;t need to deploy a Spark cluster before you run a Spark application, so it&amp;rsquo;s usually used for developing and testing a Spark application.&lt;/p&gt;

&lt;h3 id=&#34;run-on-cluster&#34;&gt;Run on Cluster&lt;/h3&gt;

&lt;p&gt;Spark support serval type of &lt;a href=&#34;https://spark.apache.org/docs/latest/cluster-overview.html#cluster-manager-types&#34;&gt;cluster managers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The system currently supports several cluster managers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/spark-standalone.html&#34;&gt;Standalone&lt;/a&gt; – a simple cluster manager included with Spark that makes it easy to set up a cluster.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/running-on-mesos.html&#34;&gt;Apache Mesos&lt;/a&gt; – a general cluster manager that can also run Hadoop MapReduce and service applications.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/running-on-yarn.html&#34;&gt;Hadoop YARN&lt;/a&gt; – the resource manager in Hadoop 2.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spark.apache.org/docs/latest/running-on-kubernetes.html&#34;&gt;Kubernetes&lt;/a&gt; – an open-source system for automating deployment, scaling, and management of containerized applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A third-party project (not supported by the Spark project) exists to add support for &lt;a href=&#34;https://github.com/hashicorp/nomad-spark&#34;&gt;Nomad&lt;/a&gt; as a cluster manager.&lt;/p&gt;

&lt;p&gt;Examples of submitting an application on different types of cluster can be found on &lt;a href=&#34;https://spark.apache.org/docs/latest/submitting-applications.html#launching-applications-with-spark-submit&#34;&gt;Spark Offical Documents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Below is an example that uses &lt;code&gt;docker-compose&lt;/code&gt; and &lt;a href=&#34;https://hub.docker.com/r/jupyter/pyspark-notebook/&#34;&gt;jupyter/pyspark-notebook&lt;/a&gt; docker image to set up a Spark Standalone Cluster and use the cluster for Jupyter.&lt;/p&gt;

&lt;h2 id=&#34;spark-application-deployment-mode&#34;&gt;Spark Application Deployment Mode&lt;/h2&gt;

&lt;p&gt;Before we going to the detail of deployment mode, we should know about the components of a Spark application.&lt;/p&gt;

&lt;p&gt;A Spark application is composed of the driver and executors that can run locally (on a single JVM) or using cluster resources (like CPU, RAM and disk that are managed by a cluster manager).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://spark.apache.org/docs/latest/img/cluster-overview.png&#34; alt=&#34;A Spark application run on a cluster&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Deploy modes are all about where the Spark driver runs. Spark provides two types of deploy mode: client and cluster. In client deploy mode, the Spark driver (and SparkContext) runs on a client node outside a cluster whereas in cluster mode it runs inside a cluster, i.e. inside a YARN container alongside ApplicationMaster (that acts as the Spark application in YARN).&lt;/p&gt;

&lt;p&gt;Deploy mode can be specified using the &lt;code&gt;--deploy-mode&lt;/code&gt; parameter or &lt;code&gt;spark.submit.deployMode&lt;/code&gt; when submitting a Spark application.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;cluster deploy mode is only available for non-local cluster deployments.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;client-deployment-mode&#34;&gt;Client Deployment Mode&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cloudera.com/documentation/enterprise/5-4-x/images/spark-yarn-client.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Client deployment mode is the default mode when submitting a Spark application. In client mode, the driver daemon runs in the machine through which you submit the spark job to your cluster. This mode is great when you want to use Spark interactively like give some user input or use any shell command. Also, in this mode, you can use actions like &lt;code&gt;take()&lt;/code&gt; or &lt;code&gt;collect()&lt;/code&gt; which fetch all transformation results to the driver program and can be seen.&lt;/p&gt;

&lt;h3 id=&#34;cluster-deployment-mode&#34;&gt;Cluster Deployment Mode&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.cloudera.com/documentation/enterprise/5-4-x/images/spark-yarn-cluster.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In cluster mode, you don&amp;rsquo;t get to use the spark job interactively as the client through which you submit the job is gone as soon as it successfully submits the job to cluster. In this mode, most of the time, it&amp;rsquo;s a waste of memory to use &lt;code&gt;take()&lt;/code&gt;, as it will fetch all the results to your driver (in the cluster and not in the client that submit the job). So you may want to store the results of your transformation to a distributed environment like HDFS.
Some resources have to be reserved for the driver daemon process as it will be running in your cluster.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cluster deploy mode is not applicable to Spark shell tools, including &lt;code&gt;spark-shell&lt;/code&gt;, &lt;code&gt;pyspark&lt;/code&gt; and &lt;code&gt;spark-sql&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;reference-and-further-reading&#34;&gt;Reference and Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudera.com/documentation/enterprise/5-4-x/topics/cdh_ig_running_spark_on_yarn.html#concept_asc_2hr_gs&#34;&gt;Running Spark Applications on YARN | 5.4.x | Cloudera Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jaceklaskowski.gitbooks.io/mastering-apache-spark/yarn/&#34;&gt;Spark on YARN · The Internals of Apache Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/kk17/356aa351dfe9db42303899ab9d8cb1b1&#34;&gt;Deploying Spark on Kubernetes Spark Standalone Cluster using Jupyter Docker Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.waitingforcode.com/apache-spark/docker-composing-apache-spark-yarn-image/read&#34;&gt;Docker-composing Apache Spark on YARN image on waitingforcode.com - articles about Apache Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://testdriven.io/blog/deploying-spark-on-kubernetes/&#34;&gt;Deploying Spark on Kubernetes | TestDriven.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>YARN Basics</title>
      <link>https://blog.kk17.net/post/yarn-basics/</link>
      <pubDate>Mon, 15 Jul 2019 19:31:49 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/yarn-basics/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html&#34;&gt;Apache Hadoop YARN&lt;/a&gt; is the cluster manager for Hadoop MapReduce, but it can also be used for other compute framework such as Spark. YARN(Yet Another Resource Negotiator) was introduced since Hadoop 2.0 to split up the functionalities of resource management and job scheduling/monitoring into separate daemons. The idea is to have a global ResourceManager (RM) and per-application ApplicationMaster (AM). An application is either a single job or a DAG of jobs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/yarn_architecture.gif&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ResourceManager&lt;/strong&gt; is the ultimate authority that arbitrates resources among all the applications in the system. There is only one global ResourceManager in a YARN cluster and it has two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt; is responsible for allocating resources to the various running applications subject to familiar constraints of capacities, queues etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationsManager&lt;/strong&gt; is responsible for accepting job-submissions, negotiating the first container for executing the application specific ApplicationMaster and provides the service for restarting the ApplicationMaster container on failure.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;NodeManager&lt;/strong&gt; is the per-machine framework agent who is responsible for containers, monitoring their resource usage (cpu, memory, disk, network) and reporting the same to the ResourceManager/Scheduler.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ApplicationMaster&lt;/strong&gt; is responsible for negotiating appropriate resource containers from the Scheduler, tracking their status and monitoring for progress. The ApplicationMaster is run per-application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;spark-on-yarn&#34;&gt;Spark On YARN&lt;/h2&gt;

&lt;p&gt;How Spark executors are started in YARN cluster mode:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://trello-attachments.s3.amazonaws.com/5cc443a11c07cb4a8711dceb/5d1dadb1bce6c77b381e18ef/29b5697eaeeb984f0ca873b8ae1bff74/image.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hadoop.apache.org/docs/current/hadoop-yarn/hadoop-yarn-site/YARN.html&#34;&gt;Apache Hadoop 2.9.2 – Apache Hadoop YARN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cloudera.com/blog/2015/09/untangling-apache-hadoop-yarn-part-1/&#34;&gt;Untangling Apache Hadoop YARN, Part 1: Cluster and YARN Basics - Cloudera Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cloudera.com/documentation/enterprise/5-3-x/topics/cdh_ig_yarn_tuning.html&#34;&gt;Tuning YARN | 5.3.x | Cloudera Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>How to Extend Spark</title>
      <link>https://blog.kk17.net/post/how-to-extend-spark/</link>
      <pubDate>Sat, 25 May 2019 17:43:29 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/how-to-extend-spark/</guid>
      
        <description>&lt;p&gt;In this post, we go through extending a Spark application and also Spark APIs by some examples. These two kinds of extensions are sometimes related, and we go with extending a Spark application first.&lt;/p&gt;

&lt;h2 id=&#34;extend-a-spark-application&#34;&gt;Extend a Spark Application&lt;/h2&gt;

&lt;p&gt;When we write a Spark application, it quite common that our code depends on other projects. There are several
ways to submit your application to Spark with dependencies. The first way is to create an assembly jar (or “uber” jar) containing your code and its dependencies. Both &lt;a href=&#34;https://github.com/sbt/sbt-assembly&#34;&gt;sbt&lt;/a&gt; and &lt;a href=&#34;http://maven.apache.org/plugins/maven-shade-plugin/&#34;&gt;Maven&lt;/a&gt; have assembly plugins.
Another more easy and common way is to use &lt;code&gt;--jars&lt;/code&gt; option of &lt;code&gt;spark-submit&lt;/code&gt; command to specify your dependent jars and these jars are automatically transferred to the cluster. For Python, the equivalent &lt;code&gt;--py-files&lt;/code&gt; option can be used to distribute .egg, .zip and .py libraries to executors.&lt;/p&gt;

&lt;p&gt;If you use Maven to manage your dependencies, you can simply supply a comma-delimited list of Maven coordinates with &lt;code&gt;--packages&lt;/code&gt;. All transitive dependencies are handled when using this command. Additional repositories (or resolvers in SBT) can be added in a comma-delimited fashion with the flag &lt;code&gt;--repositories&lt;/code&gt;. If you want to know more about these methods you can find &lt;a href=&#34;https://spark.apache.org/docs/latest/submitting-applications.html&#34;&gt;more information&lt;/a&gt; on Spark Document.&lt;/p&gt;

&lt;p&gt;Spark also allow specify a default &lt;code&gt;spark.jars&lt;/code&gt; and &lt;code&gt;spark.packages&lt;/code&gt; in &lt;code&gt;spark-defaults.conf&lt;/code&gt; configuration file. These two properties can specify programmatically in your application. What I found out is that if the &lt;code&gt;--jars&lt;/code&gt; and &lt;code&gt;--packages&lt;/code&gt; options will override  corresponding properties in the configuration file and specifying these two properties programmatically sometimes do not work.&lt;/p&gt;

&lt;p&gt;Putting the dependencies jars directly into &lt;code&gt;${SPARK_HOME}/jars&lt;/code&gt; directory is another method. This effect all the applications, and if you submit an application with &lt;code&gt;deploy-mode=cluster&lt;/code&gt; option, you need to make sure the dependencies jars exits in the Spark lib directory of driver machine.&lt;/p&gt;

&lt;p&gt;Examples code for testing these methods can be found here: &lt;a href=&#34;https://github.com/kk17/extend_spark_application_example&#34;&gt;extend_spark_application_example&lt;/a&gt;. If you want to know more about all these options, you can read the discussion &lt;a href=&#34;https://stackoverflow.com/questions/37132559/add-jars-to-a-spark-job-spark-submit&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;extend-spark-apis&#34;&gt;Extend Spark APIs&lt;/h2&gt;

&lt;p&gt;Sometimes we may find that Spark APIs cannot satisfy our requirements. Therefore we want to
add some custom feature into Spark APIs.&lt;/p&gt;

&lt;p&gt;If we add new APIs, we can simply package our extension code and put the jar file into &lt;code&gt;${SPARK_HOME}/jars&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;use-extension-points&#34;&gt;Use extension points&lt;/h3&gt;

&lt;p&gt;If we want to modify Spark APIs, things became a bit more complicated. Spark provides some extension points which added in &lt;a href=&#34;https://issues.apache.org/jira/browse/SPARK-18127&#34;&gt;SPARK-18127&lt;/a&gt; that can be used to inject our custom code. For example, The &lt;a href=&#34;https://spark.apache.org/docs/2.3.0/api/java/org/apache/spark/sql/SparkSessionExtensions.html&#34;&gt;SparkSessionExtensions&lt;/a&gt; provides the following extension points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyzer Rules.&lt;/li&gt;
&lt;li&gt;Check Analysis Rules&lt;/li&gt;
&lt;li&gt;Optimizer Rules.&lt;/li&gt;
&lt;li&gt;Planning Strategies.&lt;/li&gt;
&lt;li&gt;Customized Parser.&lt;/li&gt;
&lt;li&gt;(External) Catalog listeners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kk17/spark-authorizer&#34;&gt;spark-authorizer&lt;/a&gt;, one of the projects I involved, is using SparkSessionExtensions to inject an optimizer rule that used to implement user authorization. I demonstrate the steps below.&lt;/p&gt;

&lt;h4 id=&#34;step-1-create-an-optimizer-rule-class&#34;&gt;Step 1: Create an Optimizer rule class&lt;/h4&gt;

&lt;p&gt;To implement the authorization, use the &lt;code&gt;AuthorizerExtension&lt;/code&gt;  class as shown in the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.apache.spark.sql.catalyst.optimizer&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizerExtension&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;spark&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;LogicalPlan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Authorizable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;trait&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Authorizable&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;LogicalPlan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Logging&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; spark&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSession&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; apply&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;LogicalPlan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;LogicalPlan&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; operationType&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HiveOperationType&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getOperationType&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;in&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; out&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;PrivilegesBuilder&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;build&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    spark&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sharedState&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;externalCatalog &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HiveExternalCatalog&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizationProvider&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;checkPrivileges&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
            spark&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizationRequest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;operationType&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; in&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; out&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
          &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; hae&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HiveAccessControlException&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;
            error&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
              &lt;span style=&#34;color: #BA2121&#34;&gt;s&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 |+===============================+&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 ||Spark SQL Authorization Failure|&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 ||-------------------------------|&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 ||&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;hae&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getMessage&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 ||-------------------------------|&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 ||Spark SQL Authorization Failure|&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;                 |+===============================+&lt;/span&gt;
&lt;span style=&#34;color: #BA2121&#34;&gt;               &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;stripMargin&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; hae
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; e&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; e
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// iff no exception.&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// We just return the original plan here, so this rule will be executed only once.&lt;/span&gt;
    plan
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-2-create-a-first-class-function-with-the-extension-points-api-to-add-a-new-rule&#34;&gt;Step 2: Create a first-class function with the Extension Points API to add a new rule&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.apache.spark.sql.authorization&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizationExtension&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkSessionExtensions&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; apply&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ext&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSessionExtensions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ext&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;injectOptimizerRule&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizerExtension&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-3-enable-the-customized-rule&#34;&gt;Step 3: Enable the customized rule&lt;/h4&gt;

&lt;p&gt;There are two ways to enable customized rule. One is using the &lt;code&gt;withExtensions&lt;/code&gt; option when creating SparkSession.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; spark &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;builder&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;withExtensions&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizerExtension&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;getOrCreate&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, we want the authorization rule to be enabled by default, so we choose to configure the &lt;code&gt;spark-defaults.conf&lt;/code&gt; by adding the following line.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spark.sql.extensions org.apache.spark.sql.authorization.AuthorizationExtension
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SparkSessionExtensions do not work on &lt;code&gt;pyspark&lt;/code&gt; 2.2.x and 2.3.x. You can find the issue discussed &lt;a href=&#34;https://issues.apache.org/jira/browse/SPARK-25003&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;modify-spark-source-code-directly&#34;&gt;Modify Spark source code directly&lt;/h3&gt;

&lt;p&gt;Sometimes the extension point many can match our need for some reasons. One of this situation is that there is a bug in Spark that affects our application, and this bug will not be fixed by Spark maintainers. One of these bugs I run into is &lt;a href=&#34;https://issues.apache.org/jira/browse/SPARK-24570&#34;&gt;SPARK-24570&lt;/a&gt;: Spark Thrift Server having a problem showing schemas SQL client tools. I solved this problem by &lt;a href=&#34;https://github.com/kk17/spark/commit/0b06526019cb9a0ba1857b41c3a47dd7bce87529&#34;&gt;modify&lt;/a&gt; Spark source code directly and built a new thrift-server jar.&lt;/p&gt;

&lt;h3 id=&#34;use-aspect-oriented-programming-aop-extension&#34;&gt;Use aspect-oriented programming (AOP) extension&lt;/h3&gt;

&lt;p&gt;Because Scala, the native program language used by Spark, is a JVM language. So we can &lt;a href=&#34;https://www.eclipse.org/aspectj/&#34;&gt;AspectJ&lt;/a&gt; to intercept Spark code. In this way, we can modify the Spark APIs without modifying Spark source code directly.&lt;/p&gt;

&lt;p&gt;For those not familiar with AspectJ, here is a brief introduction. AspectJ is an aspect-oriented programming (AOP) extension created at PARC for the Java programming language. AspectJ has become a widely used de facto standard for AOP by emphasizing simplicity and usability for end users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://blog.kk17.net/img/aop.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I used AspectJ in the &lt;a href=&#34;https://github.com/kk17/spark-authorizer&#34;&gt;spark-authorizer&lt;/a&gt; project. I use it to enhance Spark SessionCatalog, making it only return the databases and tables user have privileges to access.&lt;/p&gt;

&lt;h4 id=&#34;step-1-create-a-aspect-class&#34;&gt;Step 1: Create a aspect class&lt;/h4&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.apache.spark.sql.catalyst.catalog&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SessionCatalogAspect&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Logging&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;lazy&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; spark&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSession&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getActiveSession
    &lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getOrElse&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getDefaultSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color: #AA22FF&#34;&gt;@Around&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;execution(public * org.apache.spark.sql.catalyst.catalog.SessionCatalog.listDatabases(..))&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; filterListDatabasesResult&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;pjp&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    logDebug&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;filterListDatabasesResult&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; dbs &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; pjp&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;proceed&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;asInstanceOf&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]]&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; operationType&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HiveOperationType&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;HiveOperationType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SWITCHDATABASE&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; requests &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; dbs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;map &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt; db &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; inputObjs &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;JAList&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;HPO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; outputObjs &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;JAList&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;HPO&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
      inputObjs&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;add&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;HivePrivilegeObject&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;HivePrivilegeObjectType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DATABASE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; db&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizationRequest&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;operationType&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; inputObjs&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; outputObjs&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; result &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizationProvider&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;checkPrivileges&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;spark&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; requests&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;dbs zip result&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;filter&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_2&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_1&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-2-create-a-aspectj-configuration-file&#34;&gt;Step 2: create a AspectJ configuration file&lt;/h4&gt;

&lt;p&gt;create a &lt;code&gt;aop.xml&lt;/code&gt; file in &lt;code&gt;META-INFO&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;aspectj&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;aspects&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;aspect&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;org.apache.spark.sql.catalyst.catalog.SessionCatalogAspect&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/aspects&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;weaver&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;options=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;-Xset:weaveJavaxPackages=true&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;weaver&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;options=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;-XaddSerialVersionUID&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/aspectj&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;step-3-enable-aspectj-aspects-in-spark&#34;&gt;Step 3: enable AspectJ aspects in Spark&lt;/h4&gt;

&lt;p&gt;To enable AspectJ aspects in Spark, you need to put the jar file contains the aspects into &lt;code&gt;${SPARK_HOME}/jars&lt;/code&gt; and add the following line to &lt;code&gt;spark-defaults.conf&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spark.driver.extraJavaOptions -javaagent:/path/to/aspectjweaver-{version}.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;handle-code-conflict-with-spark-code&#34;&gt;Handle code conflict with Spark Code&lt;/h2&gt;

&lt;p&gt;Spark itself has large source code and depends on many third party projects. When you add code to extend Spark, there is a risk that your code or the dependencies of your code conflict with Spark code. The maintainers of Spark do try to decrease the possibility of conflict. That&amp;rsquo;s the reason they &lt;a href=&#34;https://issues.apache.org/jira/browse/SPARK-5293&#34;&gt;replace Akka&lt;/a&gt; with alternative RPC implementations and a common event loop in Spark. As a user, we also have some methods to avoid these conflicts.&lt;/p&gt;

&lt;h3 id=&#34;shade-your-code&#34;&gt;Shade your code&lt;/h3&gt;

&lt;p&gt;Shading a dependency consists of taking its content (resources files and Java class files) and renaming some of its packages before putting them in the same JAR file. Both SBT and &lt;a href=&#34;http://maven.apache.org/plugins/maven-shade-plugin/&#34;&gt;Maven&lt;/a&gt; have shade plugins.&lt;/p&gt;

&lt;p&gt;An example for shading use SBT can be found &lt;a href=&#34;https://github.com/wsargent/shade-with-sbt-assembly&#34;&gt;wsargent/shade-with-sbt-assembly: SBT project showing shading a library with SBT assembly&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example for shading use Maven can be found on &lt;a href=&#34;https://github.com/kk17/spark/tree/v2.3.2/sql/shaded-hive-thriftserver/pom.xml&#34;&gt;the Spark Thrift Service source code I modified&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;project&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #7D9029&#34;&gt;xmlns:xsi=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;
         &lt;span style=&#34;color: #7D9029&#34;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;modelVersion&amp;gt;&lt;/span&gt;4.0.0&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/modelVersion&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.spark&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spark-parent_2.11&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.2&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;relativePath&amp;gt;&lt;/span&gt;../../pom.xml&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/relativePath&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;shaded-spark-hive-thriftserver_2.11&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;packaging&amp;gt;&lt;/span&gt;jar&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/packaging&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Shaded Spark Project Hive Thrift Server&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://spark.apache.org/&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;sbt.project.name&amp;gt;&lt;/span&gt;shaded-hive-thriftserver&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/sbt.project.name&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.spark&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spark-hive-thriftserver_${scala.binary.version}&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${project.version}&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;outputDirectory&amp;gt;&lt;/span&gt;target/scala-${scala.binary.version}/classes&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/outputDirectory&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;testOutputDirectory&amp;gt;&lt;/span&gt;target/scala-${scala.binary.version}/test-classes&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/testOutputDirectory&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-shade-plugin&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;package&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;shade&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;configuration&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;artifactSet&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;include&amp;gt;&lt;/span&gt;org.apache.spark:spark-hive-thriftserver_${scala.binary.version}&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/artifactSet&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;relocations&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;relocation&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;org.apache.spark.sql.hive.thriftserver&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;shadedPattern&amp;gt;&lt;/span&gt;shaded.org.apache.spark.sql.hive.thriftserver&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/shadedPattern&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;includes&amp;gt;&lt;/span&gt;
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;include&amp;gt;&lt;/span&gt;org.apache.spark.sql.hive.thriftserver.**&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
                  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/includes&amp;gt;&lt;/span&gt;
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/relocation&amp;gt;&lt;/span&gt;
              &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/relocations&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I created a new module called &lt;code&gt;shaded-spark-hive-thriftserver&lt;/code&gt; to shade the code from the original &lt;code&gt;spark-hive-thriftserver&lt;/code&gt; module. After this shading, I use the shaded class &lt;code&gt;shaded.org.apache.spark.sql.hive.thriftserver.HiveThriftServer2&lt;/code&gt; as the Main class of my application, so I don&amp;rsquo;t need to replace the original &lt;code&gt;spark-hive-thriftserver&lt;/code&gt; jar in the Spark lib directory.&lt;/p&gt;

&lt;h3 id=&#34;shim&#34;&gt;Shim&lt;/h3&gt;

&lt;p&gt;By renaming resources, shading avoids possible resource conflicts. It&amp;rsquo;s powerful but also limited. User needs to use the renamed resources on his own. Think about injecting an authorization rule into Spark mentioned above. The authorization rule has third-party dependencies. To keep the functionality of the authorization rule and avoid possible code conflicts at the same time, we need to make the extension class visible for Spark while other classes are isolated from Spark. The way of doing this is by using a shim.&lt;/p&gt;

&lt;p&gt;In computer science, shims can have two meanings. In general, a shim is a small library that transparently intercepts an API, changing the parameters passed, handling the operation itself, or redirecting the operation elsewhere. This kind of shims is used in Spark, like the &lt;a href=&#34;https://github.com/apache/spark/blob/master/sql/hive/src/main/scala/org/apache/spark/sql/hive/client/HiveShim.scala&#34;&gt;HiveShim&lt;/a&gt;, but what I am going to talk about is the other kind of shims. These shims are used to isolate your application code from other parts of the system. Shims divert calls to specific methods to the actual implementation code that you write.&lt;/p&gt;

&lt;p&gt;When I developing the spark-authorizer project, I got this shim idea from &lt;a href=&#34;https://github.com/apache/ranger/tree/master/ranger-hive-plugin-shim&#34;&gt;ranger-hive-plugin-shim&lt;/a&gt;, then I developed a similar shim for the spark-authorizer.&lt;/p&gt;

&lt;p&gt;When a class is loaded into two runtime classes by different ClassLoaders, these two classes are treated as different classes in JVM runtime. The principle behinds this kind of shims is that we create a proxy class for our application entrance class, and then this proxy uses an independent ClassLoader to load you actual implement class from a specific place. The proxy redirects the calls to the actual class. Therefore the real code is isolated. Below is the shim code I wrote for &lt;code&gt;AuthorizationExtension&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;org.apache.spark.sql.authorization&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AuthorizationExtension&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkSessionExtensions&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Unit&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Logging&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SPARK_PLUGIN_TYPE&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;authorizer&amp;quot;&lt;/span&gt;
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AUTHORIZER_IMPL_CLASSNAME&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;org.apache.spark.sql.catalyst.optimizer.AuthorizerExtension&amp;quot;&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;lazy&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; pluginClassLoader &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkPluginClassLoader&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getInstance&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SPARK_PLUGIN_TYPE&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getClass&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;lazy&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; authorizerImpl&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSession&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;LogicalPlan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    logDebug&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;==&amp;gt; AuthorizationExtension.init()&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; cls &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Class&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;forName&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;AUTHORIZER_IMPL_CLASSNAME&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;$&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; pluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
      activatePluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; instance &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; cls&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getField&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;MODULE$&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;cls&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;asInstanceOf&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;SparkSession&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Rule&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;LogicalPlan&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]]&lt;/span&gt;
      logDebug&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;lt;== AuthorizationExtension.init()&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
      instance
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; e&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// check what need to be done&lt;/span&gt;
        logError&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Error Enabling AuthorizationExtension&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; e
      &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;finally&lt;/span&gt; deactivatePluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;


  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; activatePluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;pluginClassLoader &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; pluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;activate
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; deactivatePluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;pluginClassLoader &lt;span style=&#34;color: #666666&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; pluginClassLoader&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;deactivate
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; apply&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;ext&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSessionExtensions&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    ext&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;injectOptimizerRule&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;authorizerImpl&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.ibm.com/code/2017/11/30/learn-extension-points-apache-spark-extend-spark-catalyst-optimizer/&#34;&gt;Learn the extension points in Apache Spark and extend the Spark Catalyst Optimizer - IBM Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Pitfalls in Using Spark Catalog API</title>
      <link>https://blog.kk17.net/post/pitfalls-in-using-spark-catalog-api/</link>
      <pubDate>Sat, 27 Apr 2019 16:42:59 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/pitfalls-in-using-spark-catalog-api/</guid>
      
        <description>&lt;p&gt;Spark SQL supports querying data via SQL and in order to use this feature, we must enable Spark with Hive support, because Spark uses Hive Metastore to store metadata. By default, Spark uses an in-memory embedded database called Derby to store the metadata, but it can also configure to use an external Hive Metastore. Spark Hive Configuration can be found here:  &lt;a href=&#34;https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html&#34;&gt;Hive Tables - Spark 2.4.1 Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Except using DDL SQL to manipulate metadata stored in Hive Metastore, Spark SQL also provides a minimalist API know as Catalog API to manipulate metadata in spark applications. Spark Catalog API can be found here: &lt;a href=&#34;https://spark.apache.org/docs/2.2.1/api/java/org/apache/spark/sql/catalog/Catalog.html&#34;&gt;Catalog (Spark 2.2.1 JavaDoc)&lt;/a&gt; and &lt;a href=&#34;https://spark.apache.org/docs/2.3.0/api/python/_modules/pyspark/sql/catalog.html&#34;&gt;pyspark.sql.catalog — PySpark master documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After using Spark Catalog API for a period of time, I found some pitfalls.&lt;/p&gt;

&lt;h2 id=&#34;1-problem-in-creating-external-table-with-specified-schema&#34;&gt;1. Problem in creating external table with specified schema&lt;/h2&gt;

&lt;p&gt;When a user create an external table with specified schema, the schema will actually not be used and the table will fail to be recognized as a partitioned table. I dived into the Spark source code and found the reason. The source code is from Spark 2.3.2.&lt;/p&gt;

&lt;p&gt;Source Code is listed below and I omitted some code and added some notes start with &lt;code&gt;//NOTE:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The API where implemented by &lt;a href=&#34;https://github.com/apache/spark/blob/branch-2.3/sql/core/src/main/scala/org/apache/spark/sql/internal/CatalogImpl.scala#L338&#34;&gt;CatalogImpl.scala&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; createTable&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
      tableName&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
      source&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
      schema&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;StructType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
      options&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;])&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;DataFrame&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; tableIdent &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; sparkSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sessionState&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sqlParser&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;parseTableIdentifier&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tableName&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; storage &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DataSource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;buildStorageFormatFromOptions&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;options&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; tableType &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;storage&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;locationUri&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;isDefined&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
      &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CatalogTableType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;EXTERNAL&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
      &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CatalogTableType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;MANAGED&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: user specified schema is set to tableDesc and use no partitionColumnNames can specify here  &lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; tableDesc &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CatalogTable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
      identifier &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; tableIdent&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
      tableType &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; tableType&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
      storage &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; storage&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
      schema &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; schema&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;   
      provider &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;source&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; plan &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CreateTable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tableDesc&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SaveMode&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ErrorIfExists&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    sparkSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sessionState&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;executePlan&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;plan&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;toRdd  
    sparkSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tableIdent&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Catalog createTable API will eventually run &lt;code&gt;CreateDataSourceTableCommand&lt;/code&gt; in &lt;a href=&#34;https://github.com/apache/spark/blob/branch-2.3/sql/core/src/main/scala/org/apache/spark/sql/execution/command/createDataSourceTables.scala#L80&#34;&gt;createDataSourceTables.scala&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CreateDataSourceTableCommand&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;CatalogTable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ignoreIfExists&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Boolean&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;RunnableCommand&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; run&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;sparkSession&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;SparkSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: the resolved dataSource include an inferred schema and partitionSchema  &lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; dataSource&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;BaseRelation&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  
      &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DataSource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
        sparkSession &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; sparkSession&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
        userSpecifiedSchema &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;isEmpty&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;),&lt;/span&gt;  
        partitionColumns &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
        className &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
        bucketSpec &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;bucketSpec&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
        options &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;storage&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;properties &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; pathOption&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;// As discussed in SPARK-19583, we don&amp;#39;t check if the location is existed  &lt;/span&gt;
        catalogTable &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;tableWithDefaultOptions&lt;span style=&#34;color: #666666&#34;&gt;)).&lt;/span&gt;resolveRelation&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;checkFilesExist &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; partitionColumnNames &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;nonEmpty&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
      &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: if user specified schama, use the partitionColumnNames from CatalogTable passed to the class  &lt;/span&gt;
      table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;partitionColumnNames  
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
      &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; newTable &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; dataSource &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; r&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HadoopFsRelation&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;r.overlappedPartCols.nonEmpty&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt;  
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

      &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; 

        table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
          schema &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; dataSource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: no matter whether user specify a schema, just use the infered schmea here  &lt;/span&gt;
          partitionColumnNames &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
          &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
          &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
    sessionState&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;catalog&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;createTable&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;newTable&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ignoreIfExists &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Seq&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;empty&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;Row&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;  
  &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;solution&#34;&gt;Solution&lt;/h4&gt;

&lt;p&gt;Don&amp;rsquo;t know the reason why the source code is written in that way and whether this should be considered as a bug. One solution we come up with for this problem is to implement a custom crateTable API.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/kk17/60f956379398b0792059498543566e2a#file-catalogutil-scala&#34;&gt;CatalogUtil.scala&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CatalogUtil&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;lazy&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; sparkSession &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkSession&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getActiveSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get  
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; createTable&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
                       tableName&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                       source&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                       path&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                       schema&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;StructType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                       options&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color: #B00040&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;],&lt;/span&gt;  
                       partitionColumnsInSchema&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Boolean&lt;/span&gt;  
                   &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Unit&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; table &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;CatalogTable&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
            identifier &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; tableIdent&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
            tableType &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; tableType&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
            storage &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; storage&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
            schema &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; schema&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
            provider &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;newSource&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
        &lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
        &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; dataSource&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;BaseRelation&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;  
            &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;DataSource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
                sparkSession &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; sparkSession&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                userSpecifiedSchema &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;isEmpty&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Some&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;),&lt;/span&gt;  
                partitionColumns &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                className &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;provider&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
                &lt;span style=&#34;color: #666666&#34;&gt;)).&lt;/span&gt;resolveRelation&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;checkFilesExist &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: alway use infered partitionColumnNames here, cause we don&amp;#39;t allow use specify partitionColumnNames  &lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; partitionColumns&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #B00040&#34;&gt;StructField&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
            assert&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;isEmpty&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
            dataSource &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; r&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;HadoopFsRelation&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&amp;gt;&lt;/span&gt; r&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;partitionSchema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields  
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;empty  
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; partitionColumnNames &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; partitionColumns&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;

        &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: merge partitionColumns into table schema if necessary  &lt;/span&gt;
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; newSchema&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #B00040&#34;&gt;StructType&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;nonEmpty&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
            &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;partitionColumnsInSchema&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
                table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema  
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
                table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;map&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color: #666666&#34;&gt;).&lt;/span&gt;intersect&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;Array&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;StructType&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;fields &lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt; partitionColumns&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
                    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; arr &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; message &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;Partition column names: &amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;  
                            &lt;span style=&#34;color: #BA2121&#34;&gt;s&amp;quot;[&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;arr&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mkString&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;] cannot exist in user specified schema.\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;  
                            &lt;span style=&#34;color: #BA2121&#34;&gt;s&amp;quot; Inferred partition columns: [&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;mkString&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;].\n&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;  
                            &lt;span style=&#34;color: #BA2121&#34;&gt;s&amp;quot; User specified schema:\n&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;treeString&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;

                        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;ConflictedSchemaException&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
                    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
                &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
            &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;  
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;  
            dataSource&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;schema  
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;val&lt;/span&gt; newTable &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt;  
            table&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;copy&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;  
                schema &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; newSchema&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;//NOTE: use specifed schema  &lt;/span&gt;
                partitionColumnNames &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; partitionColumnNames&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt;  
                &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;

  
        sessionState&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;catalog&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;createTable&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;newTable&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; ignoreIfExists &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;  
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you see our custom API is written in Scala, if we want to use in a python application, we must use Python Java Gateway. You can find more detail here:&lt;a href=&#34;https://diogoalexandrefranco.github.io/scala-code-in-pyspark/&#34;&gt;Using Scala code in PySpark applications&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-partitioned-table-data-only-avaliable-after-invoked-recoverpartitions&#34;&gt;2. Partitioned table data only avaliable after invoked &lt;code&gt;recoverPartitions&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;If you created an external partitioned table and immediately read data from the table, you will find the data is empty. Data only available after invoked &lt;code&gt;recoverPartitions&lt;/code&gt; method. This is different from a non-partitioned table and Spark Catalog doesn&amp;rsquo;t have a convenient method for testing whether the table is partitioned.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0000FF; font-weight: bold&#34;&gt;SparkCatalog&lt;/span&gt;(Catalog):  
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;is_partitioned_table&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, table_name):  
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;PARTITIONED BY&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;get_create_table_statement(table_name)

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;get_create_table_statement&lt;/span&gt;(&lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;, table_name):  
        &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;_sparkSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sql(f&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;show create table `{table_name}`&amp;quot;&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;collect()[&lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;][&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;createtab_stmt&amp;quot;&lt;/span&gt;]

    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #0000FF&#34;&gt;create_or_refresh_table&lt;/span&gt;(&lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;):  
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;  
                &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;is_partitioned_table(table):  
                    &lt;span style=&#34;color: #008000&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;recoverPartitions(table)  
    &lt;span style=&#34;color: #666666&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;3-refreshtable-api-only-refresh-the-cache-in-sparkcontext&#34;&gt;3. &lt;code&gt;refreshTable&lt;/code&gt; API only refresh the cache in SparkContext&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;catalog.refreshTable&lt;/code&gt; only refresh the cached data and metadata of the given table in sparkContext, if we want to update the table&amp;rsquo;s meta(schema, transient_lastDdlTime and etc) in the hive metastore, we need to drop and recreate the table.&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Use Spark Sql With Hive Metastore</title>
      <link>https://blog.kk17.net/post/use-spark-sql-with-hive-metastore/</link>
      <pubDate>Wed, 27 Feb 2019 15:52:48 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/use-spark-sql-with-hive-metastore/</guid>
      
        <description>

&lt;h1 id=&#34;spark-sql&#34;&gt;Spark SQL&lt;/h1&gt;

&lt;p&gt;Spark SQL is a module for working with structured data&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;spark &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; SparkSession&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;builder&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;config(conf&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;conf)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;enableHiveSupport()&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;getOrCreate()
spark&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sql(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;use database_name&amp;quot;&lt;/span&gt;)
spark&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;sql(&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;select * from table_name where id in (3085,3086,3087) and dt &amp;gt; &amp;#39;2019-03-10&amp;#39;&amp;quot;&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;toPandas()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;hive&#34;&gt;Hive&lt;/h2&gt;

&lt;p&gt;Data warehouse software for reading, writing, and managing large datasets residing in distributed storage and queried using SQL syntax.&lt;/p&gt;

&lt;p&gt;Hive transforms SQL queries as Hive MapReduce job.&lt;/p&gt;

&lt;p&gt;Besides MapReduce, Hive can use Spark and Tez as execute engine.&lt;/p&gt;

&lt;h2 id=&#34;spark-and-hive&#34;&gt;Spark and Hive&lt;/h2&gt;

&lt;p&gt;In Spark 1.0, Spark use many Hive codes in Spark SQL. It ran Hadoop style Map/Reduce jobs on top of the Spark engine&lt;/p&gt;

&lt;p&gt;There is almost no Hive left in Spark 2.0. While the Sql Thrift Server is still built on the HiveServer2 code, almost all of the internals are now completely Spark-native, for example Spark it build a brand new Spark-native optimization engine knows as Catalyst.&lt;/p&gt;

&lt;h2 id=&#34;hiveserver2&#34;&gt;HiveServer2&lt;/h2&gt;

&lt;p&gt;A server interface that enables remote clients to execute queries against Hive and retrieve the results.&lt;/p&gt;

&lt;p&gt;With HiveServer2, we can use JDBC and ODBC connecters to connect to Hive.&lt;/p&gt;

&lt;h2 id=&#34;spark-thrift-server&#34;&gt;Spark Thrift Server&lt;/h2&gt;

&lt;p&gt;Spark Thrift Server is variant of HiveServer2.&lt;/p&gt;

&lt;p&gt;Thrift is the RPC framework use for client and Server communication.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22542670/27733176-54b684c2-5db2-11e7-946b-5b5ef5595e43.png&#34; alt=&#34;https://user-images.githubusercontent.com/22542670/27733176-54b684c2-5db2-11e7-946b-5b5ef5595e43.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Spark Thrift Server have a bug in showing db schemes and tables. We cherry-picked the patch codes into Spark 2.3.2 the version we now used and used a shaded jar in deploying Spark Thrift Server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://issues.apache.org/jira/browse/SPARK-24196&#34;&gt;[SPARK-24196] Spark Thrift Server - SQL Client connections does&amp;rsquo;t show db artefacts - ASF JIRA&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;inception-or-multiple-sessions&#34;&gt;“Inception” or “Multiple Sessions”&lt;/h4&gt;

&lt;p&gt;From Spark 1.6, by default, the Thrift server runs in multi-session mode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spark.sql.hive.thriftServer.singleSession=false
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mysterious-ooms-and-how-to-avoid-them-or-incremental-collect&#34;&gt;“Mysterious OOMs and How to Avoid Them” or “Incremental Collect”&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;spark.sql.thriftServer.incrementalCollect=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The setting IncrementalCollect changes the gather method from collect to toLocalIterator.&lt;/p&gt;

&lt;h2 id=&#34;metastore&#34;&gt;Metastore&lt;/h2&gt;

&lt;p&gt;Central repository of Hive metadata.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.5/bk_spark-component-guide/content/figures/4/figures/sts-architecture.png&#34; alt=&#34;https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.5/bk_spark-component-guide/content/figures/4/figures/sts-architecture.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Metastore need a warehouse location for storage for internal tables data. Although we only use external tables, the warehouse location is still needed because every database in Metastore needs a corresponding folder in the warehouse. Spark references &lt;code&gt;spark.sql.warehouse.dir&lt;/code&gt; as the default Spark SQL Hive Warehouse location. In EMR cluster this property is config to cluster HDFS location by default. If the cluster goes down the HDFS will become unavailable and this may cause some problem in using Spark SQL to query table data. Therefore we the location to the local file system. In other words, config &lt;code&gt;spark.sql.warehouse.dir&lt;/code&gt; to &lt;code&gt;file:///usr/lib/spark/warehouse&lt;/code&gt; in &lt;code&gt;spark-defaults.conf&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.russellspitzer.com/2017/05/19/Spark-Sql-Thriftserver/&#34;&gt;Russell Spitzer&amp;rsquo;s Blog: Spark Thrift Server Basics and a History&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>linux命令行笔记</title>
      <link>https://blog.kk17.net/post/linux-commands/</link>
      <pubDate>Wed, 19 Aug 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/linux-commands/</guid>
      
        <description>

&lt;h2 id=&#34;命令行日常系快捷键&#34;&gt;命令行日常系快捷键&lt;/h2&gt;

&lt;p&gt;如下的快捷方式非常有用，能够极大的提升你的工作效率：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CTRL + A – 移动光标到行首&lt;/li&gt;
&lt;li&gt;CTRL + E – 移动光标到行末&lt;/li&gt;
&lt;li&gt;CTRL + U – 剪切光标前的内容&lt;/li&gt;
&lt;li&gt;CTRL + K – 剪切光标至行末的内容&lt;/li&gt;
&lt;li&gt;ALT+ ← - 光标跳到上一个单词&lt;/li&gt;
&lt;li&gt;ALT + → - 光标跳到下一个单词&lt;/li&gt;
&lt;li&gt;CTRL + ← - 光标跳到上一个单词（mac）&lt;/li&gt;
&lt;li&gt;CTRL + → - 光标跳到下一个单词(mac)&lt;/li&gt;
&lt;li&gt;CTRL + R - 搜索命令行历史&lt;/li&gt;
&lt;li&gt;sudo !! 以root权限运行上一条命令&lt;/li&gt;
&lt;li&gt;!command 使用上一条命令的参数&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;网络&#34;&gt;网络：&lt;/h2&gt;

&lt;p&gt;查看端口占用情况
&lt;code&gt;lsof -i:8087&lt;/code&gt;
&lt;code&gt;netstat –apn | grep 8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看ip:
&lt;code&gt;ifconfig&lt;/code&gt;
&lt;code&gt;ip a&lt;/code&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&#34;cpu&#34;&gt;CPU：&lt;/h2&gt;

&lt;p&gt;查看CPU核心数
 &lt;code&gt;cat /proc/cpuinfo |grep -c processor&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;top&lt;/code&gt;然后按Shift+P，按照进程处理器占用率排序(mac下使用 &lt;code&gt;top -u&lt;/code&gt;或 &lt;code&gt;top -o cpu&lt;/code&gt;)&lt;/p&gt;

&lt;h2 id=&#34;内存&#34;&gt;内存：&lt;/h2&gt;

&lt;p&gt;用free命令查看内存使用情况
&lt;code&gt;free -m&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;top&lt;/code&gt; 然后按Shift+M, 按照进程内存占用率排序(mac下使用 &lt;code&gt;top -o mem&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;查看进程，按内存从大到小排列
&lt;code&gt;ps -e  -o &amp;quot;%C  : %p : %z : %a&amp;quot;|sort -k5 -nr&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;磁盘&#34;&gt;磁盘：&lt;/h2&gt;

&lt;p&gt;查看磁盘使用情况
&lt;code&gt;df -h&lt;/code&gt;
用iostat查看磁盘/dev/sdc3的磁盘i/o情况，每两秒刷新一次
&lt;code&gt;iostat -d -x /dev/sdc3 2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看磁盘目录统计数据
&lt;code&gt;du -h&lt;/code&gt;
&lt;code&gt;du -h -d 1 .&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;文件查找&#34;&gt;文件查找&lt;/h2&gt;

&lt;p&gt;在多级目录中查找某个文件的方法
1) &lt;code&gt;find /dir -name filename.ext&lt;/code&gt;
2) &lt;code&gt;du -a | grep filename.ext&lt;/code&gt;
3) &lt;code&gt;locate filename.ext&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;软件管理&#34;&gt;软件管理&lt;/h2&gt;

&lt;p&gt;debian&amp;amp;ubuntu：
apt-get也是dpkg的包装，直接使用&lt;code&gt;dpkg -l&lt;/code&gt; 来查看已经安装了的软件
&lt;code&gt;dpkg -l | grep &#39;^ii&#39;&lt;/code&gt;
对于Server版， 推荐使用&lt;code&gt;aptitude&lt;/code&gt;来查看，安装、删除deb包
&lt;code&gt;sudo apt-get install aptitude&lt;/code&gt;
然后执行 sudo aptitude 进入管理界面即可 ：）&lt;/p&gt;

&lt;h2 id=&#34;linux服务器之间相互复制文件&#34;&gt;linux服务器之间相互复制文件&lt;/h2&gt;

&lt;p&gt;copy 本地文件1.sh到远程192.168.9.10服务器的/data/目录下
&lt;code&gt;scp /etc/1.sh king@192.168.9.10:/data/&lt;/code&gt;
copy远程192.168.9.10服务器/data/2.sh文件到本地/data/目录
&lt;code&gt;scp king@192.168.9.10:/data/2.sh /data/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;有用的命令&#34;&gt;有用的命令&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;date -d @1267619929&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;一些资源&#34;&gt;一些资源：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linuxtools-rst.readthedocs.org/zh_CN/latest/index.html&#34;&gt;Linux工具快速教程 — Linux Tools Quick Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/83610/&#34;&gt;10个重要的Linux ps命令实战&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/83844/&#34;&gt;Awk 20 分钟入门介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/86948/&#34;&gt;11个让你吃惊的 Linux 终端命令 - 博客 - 伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/86809/&#34;&gt;提高 Vim 和 Shell 效率的 9 个建议 - 博客 - 伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/41129/&#34;&gt;趣文：有趣的 Linux 命令 - 博客 - 伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://coolshell.cn/articles/8619.html&#34;&gt;你可能不知道的Shell | 酷 壳 - CoolShell.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xprogrammer.com/1799.html&#34;&gt;Linux常用的shell命令 – 程序猿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://billie66.github.io/TLCL/index.html&#34;&gt;TLCL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/89609/&#34;&gt;一些命令行效率工具 - 博客 - 伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Shell学习笔记</title>
      <link>https://blog.kk17.net/post/learning-shell/</link>
      <pubDate>Tue, 18 Aug 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/learning-shell/</guid>
      
        <description>

&lt;h2 id=&#34;shebang&#34;&gt;shebang&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这一行表明，不管用户选择的是那种交互式shell,该脚本需要使用bash shell来运行。由于每种shell的语法大不相同，所以这句非常重要。&lt;/p&gt;

&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;定义变量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;引用变量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$X&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;单引号 VS 双引号
基本上来说，&lt;strong&gt;变量名会在双引号中展开&lt;/strong&gt;，单引号中则不会。如果你不需要引用变量值，那么使用单引号可以很直观的输出你期望的结果。 An example 示例&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; -n &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;#39;$USER=&amp;#39;&lt;/span&gt; 
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# -n选项表示阻止echo换行&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$USER&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;\$USER=&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$USER&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;  
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# 该命令等价于上面的两行命令&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;注意点&#34;&gt;注意点&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;使用双引号来保护变量名&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# !/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; -n &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$X&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt;    
&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# -n 用来检查变量是否非空&lt;/span&gt;
         &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;the variable X is not the empty string&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;使用大括号保护变量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# !/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;ABC
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color: #BB6688; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;abc&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;条件语句-if-then-elif-then-fi&#34;&gt;条件语句 if/then/elif/then/fi&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[[&lt;/span&gt; condition1 &lt;span style=&#34;color: #666666&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt;
    statement1
    statement2
    ..........
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;elif&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[[&lt;/span&gt; condition2 &lt;span style=&#34;color: #666666&#34;&gt;]]&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;then&lt;/span&gt;
    statement3
    statement4
    ........    
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;else&lt;/span&gt;
    statement5
    statement6
    ........    
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;test命令与操作符&#34;&gt;Test命令与操作符&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[[&lt;/span&gt; operand1 operator operand2 &lt;span style=&#34;color: #666666&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Test命令的格式为“操作数&amp;lt; 空格 &amp;gt;操作符&amp;lt; 空格 &amp;gt;操作数”或者“操作符&amp;lt; 空格 &amp;gt;操作数”，这里特别说明必须要有这些空格，因为shell将没有空格的第一串字符视为一个操作符（以-开头）或者操作数。&lt;/p&gt;

&lt;h3 id=&#34;操作符列表&#34;&gt;操作符列表&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作符&lt;/th&gt;
&lt;th&gt;为真条件&lt;/th&gt;
&lt;th&gt;操作数个数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-n&lt;/td&gt;
&lt;td&gt;操作数非0长度&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-z&lt;/td&gt;
&lt;td&gt;操作有长度&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;存在目录&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;存在文件&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;操作数是字符串并相等&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;与=相反&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-eq&lt;/td&gt;
&lt;td&gt;操作数是整数并相等&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-neq&lt;/td&gt;
&lt;td&gt;与-eq相反&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-lt&lt;/td&gt;
&lt;td&gt;操作数是整数并操作数1小于操作数2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-le&lt;/td&gt;
&lt;td&gt;操作数是整数并操作数1小于等于操作数2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-gt&lt;/td&gt;
&lt;td&gt;操作数是整数并操作数1大于操作数2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-ge&lt;/td&gt;
&lt;td&gt;操作数是整数并操作数1大于等于操作数2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;循环&#34;&gt;循环&lt;/h2&gt;

&lt;h2 id=&#34;for-循环&#34;&gt;For 循环&lt;/h2&gt;

&lt;p&gt;For循环会遍历空格分开的条目。注意，如果某一项含有空格，必须要用引号引起来，例子如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# !/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;colour1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;colour2&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;light blue&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;colour3&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;dark green&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;for&lt;/span&gt; X in &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$colour1&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$colour2&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot; &lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$colour3&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$X&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在for循环中可以使用通配符&lt;/strong&gt;如果shell解析字符串时遇到*号，会将它展开为所有匹配的文件名&lt;/p&gt;

&lt;h2 id=&#34;while-循环&#34;&gt;While 循环&lt;/h2&gt;

&lt;p&gt;当给定条件为真值时，while循环会重复执行。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# !/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=0&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$X&lt;/span&gt; -le &lt;span style=&#34;color: #666666&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$X&lt;/span&gt;
    &lt;span style=&#34;color: #19177C&#34;&gt;X&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;$((&lt;/span&gt;X+1&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;case语句&#34;&gt;case语句&lt;/h2&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$key&lt;/span&gt; in
    a|b&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    statement1
    ;;
    c&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    statement2
    *&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# unknown option&lt;/span&gt;
    ;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;命令替换&#34;&gt;命令替换&lt;/h2&gt;

&lt;p&gt;大括号扩展： $(commands) 会展开为命令commands的输出结果。并且允许嵌套使用，所以commands中允许包含子大括号扩展。
反撇好扩展：将commands扩展为命令commands的输出结果。不允许嵌套。&lt;/p&gt;

&lt;h2 id=&#34;位置参数处理&#34;&gt;位置参数处理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;$n&lt;/code&gt; n为0开始的整数表示第n个命令行参数，&lt;code&gt;$0&lt;/code&gt;为命令本身
&lt;code&gt;$#&lt;/code&gt; 参数个数
位置参数可以用&lt;code&gt;shift&lt;/code&gt;命令左移。比如&lt;code&gt;shift 3&lt;/code&gt;表示原来的&lt;code&gt;$4&lt;/code&gt;现在变成&lt;code&gt;$1&lt;/code&gt;，原来的&lt;code&gt;$5&lt;/code&gt;现在变成&lt;code&gt;$2&lt;/code&gt;等等，原来的&lt;code&gt;$1&lt;/code&gt;. &lt;code&gt;$2&lt;/code&gt;. &lt;code&gt;$3&lt;/code&gt;丢弃，&lt;code&gt;$0&lt;/code&gt;不移动。不带参数的&lt;code&gt;shift&lt;/code&gt;命令相当于&lt;code&gt;shift 1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;处理参数例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$#&lt;/span&gt; &amp;gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]]&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;do&lt;/span&gt;
&lt;span style=&#34;color: #19177C&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$key&lt;/span&gt; in
    -a&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    statement1
    &lt;span style=&#34;color: #008000&#34;&gt;shift&lt;/span&gt;
    ;;
    -b&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    statement2
    &lt;span style=&#34;color: #008000&#34;&gt;shift&lt;/span&gt;
    ;;
    *&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #008000&#34;&gt;break&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;# unknown option&lt;/span&gt;
    ;;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;esac&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;函数&#34;&gt;函数&lt;/h2&gt;

&lt;p&gt;shell 可以用户定义函数，然后在shell脚本中可以随便调用&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt; funname &lt;span style=&#34;color: #666666&#34;&gt;[()]&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    action;
    &lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; int;&lt;span style=&#34;color: #666666&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;

sum&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;,&lt;span style=&#34;color: #19177C&#34;&gt;$2&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;$((&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #19177C&#34;&gt;$2&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;))&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
sum &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;7&lt;/span&gt;
&lt;span style=&#34;color: #008000&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #19177C&#34;&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;定义函数可以与系统命令相同，说明shell搜索命令时候，首先会在当前的shell文件定义好的地方查找，找到直接执行。&lt;/li&gt;
&lt;li&gt;需要获得函数值：通过$?获得&lt;/li&gt;
&lt;li&gt;如果需要传出其它类型函数值，可以在函数调用之前，定义变量（这个就是全局变量）。在函数内部就可以直接修改，然后在执行函数就可以读出修改过的值。&lt;/li&gt;
&lt;li&gt;如果需要定义自己变量，可以在函数中定义：local 变量=值 ，这时变量就是内部变量，它的修改，不会影响函数外部相同变量的值 。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;一些资源&#34;&gt;一些资源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/85183/&#34;&gt;Bash快速入门指南 - 博客 - 伯乐在线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/chengmo/archive/2010/10/17/1853356.html&#34;&gt;linux shell 自定义函数(定义. 返回值. 变量作用域- ）介绍 - 程默 - 博客园&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://my.oschina.net/itblog/blog/204410&#34;&gt;Shell编程基础 - Integer - 开源中国社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/translate/python-scripts-replacement-bash-utility-scripts&#34;&gt;用 Python 替代 Bash 脚本 - 技术翻译 - 开源中国社区&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Tmux快捷键</title>
      <link>https://blog.kk17.net/post/tmux-shortcut/</link>
      <pubDate>Mon, 17 Aug 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/tmux-shortcut/</guid>
      
        <description>

&lt;h3 id=&#34;在tmux内&#34;&gt;在tmux内：&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;创建窗口&lt;/td&gt;
&lt;td&gt;C-b c&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;关闭窗口&lt;/td&gt;
&lt;td&gt;C-b &amp;amp;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;重命名窗口&lt;/td&gt;
&lt;td&gt;C-b ,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;重命名会话&lt;/td&gt;
&lt;td&gt;C-b $&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;切换到上一窗口&lt;/td&gt;
&lt;td&gt;C-b p&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;切换到下一窗口&lt;/td&gt;
&lt;td&gt;C-b n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;列出窗口供选择&lt;/td&gt;
&lt;td&gt;C-b w&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;detach&lt;/td&gt;
&lt;td&gt;C-b d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;列出列出快捷键&lt;/td&gt;
&lt;td&gt;C-b ?&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;创建右面板&lt;/td&gt;
&lt;td&gt;C-b %&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;创建下面板&lt;/td&gt;
&lt;td&gt;C-b &amp;ldquo;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;选择面板&lt;/td&gt;
&lt;td&gt;C-b o&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;列出会话供选择&lt;/td&gt;
&lt;td&gt;C-b s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;方向键选面板&lt;/td&gt;
&lt;td&gt;C-b 箭头&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;关闭面板&lt;/td&gt;
&lt;td&gt;C-b x&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;切换布局&lt;/td&gt;
&lt;td&gt;C-b space&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;切换布局&lt;/td&gt;
&lt;td&gt;C-b Esc 1-5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;选择窗口&lt;/td&gt;
&lt;td&gt;C-b Num&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;输入命令&lt;/td&gt;
&lt;td&gt;C-b :&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;多面板同步发送命令&lt;/td&gt;
&lt;td&gt;C-b : setw synchronize-panes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;!-- more --&gt;

&lt;h3 id=&#34;在tmux外&#34;&gt;在tmux外：&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;创建会话&lt;/td&gt;
&lt;td&gt;tmux new-session -s work -n tomcat&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;创建会话(不attach)&lt;/td&gt;
&lt;td&gt;tmux new-session -s work -n tomcat -d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;创建会话(输入命令)&lt;/td&gt;
&lt;td&gt;tmux new-session -t work -n tomcat -d “ssh user@host”&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;attach会话&lt;/td&gt;
&lt;td&gt;tmux a -t work&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;列出会话&lt;/td&gt;
&lt;td&gt;tmux ls&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;关闭会话&lt;/td&gt;
&lt;td&gt;tmux kill-session -t work&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;发送命令&lt;/td&gt;
&lt;td&gt;tmux send-keys -t work:editor &amp;ldquo;emacs&amp;rdquo; C-m&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;更多快捷键&#34;&gt;更多快捷键：&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;bind-key        C-o&lt;/td&gt;
&lt;td&gt;rotate-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key        C-z&lt;/td&gt;
&lt;td&gt;suspend-client&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key      Space&lt;/td&gt;
&lt;td&gt;next-layout&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          !&lt;/td&gt;
&lt;td&gt;break-pane&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          &amp;ldquo;&lt;/td&gt;
&lt;td&gt;split-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          #&lt;/td&gt;
&lt;td&gt;list-buffers&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          $&lt;/td&gt;
&lt;td&gt;rename-session&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          %&lt;/td&gt;
&lt;td&gt;split-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          &amp;amp;&lt;/td&gt;
&lt;td&gt;kill-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          &amp;lsquo;&lt;/td&gt;
&lt;td&gt;select-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          (&lt;/td&gt;
&lt;td&gt;switch-client -p&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          )&lt;/td&gt;
&lt;td&gt;switch-client -n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          ,&lt;/td&gt;
&lt;td&gt;rename-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          -&lt;/td&gt;
&lt;td&gt;delete-buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          .&lt;/td&gt;
&lt;td&gt;cmove-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          0&lt;/td&gt;
&lt;td&gt;select-window -t :0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          1&lt;/td&gt;
&lt;td&gt;select-window -t :1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          2&lt;/td&gt;
&lt;td&gt;select-window -t :2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          3&lt;/td&gt;
&lt;td&gt;select-window -t :3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          4&lt;/td&gt;
&lt;td&gt;select-window -t :4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          5&lt;/td&gt;
&lt;td&gt;select-window -t :5&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          6&lt;/td&gt;
&lt;td&gt;select-window -t :6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          7&lt;/td&gt;
&lt;td&gt;select-window -t :7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          8&lt;/td&gt;
&lt;td&gt;select-window -t :8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          9&lt;/td&gt;
&lt;td&gt;select-window -t :9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          :&lt;/td&gt;
&lt;td&gt;command-prompt&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          ;&lt;/td&gt;
&lt;td&gt;last-pane&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          =&lt;/td&gt;
&lt;td&gt;choose-buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          ?&lt;/td&gt;
&lt;td&gt;list-keys&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          D&lt;/td&gt;
&lt;td&gt;choose-client&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          L&lt;/td&gt;
&lt;td&gt;switch-client -l&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          [&lt;/td&gt;
&lt;td&gt;copy-mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          ]&lt;/td&gt;
&lt;td&gt;paste-buffer&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          c&lt;/td&gt;
&lt;td&gt;new-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          d&lt;/td&gt;
&lt;td&gt;detach-client&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          f&lt;/td&gt;
&lt;td&gt;find-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          i&lt;/td&gt;
&lt;td&gt;display-message&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          l&lt;/td&gt;
&lt;td&gt;last-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          n&lt;/td&gt;
&lt;td&gt;next-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          o&lt;/td&gt;
&lt;td&gt;select-pane -t :.+&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          p&lt;/td&gt;
&lt;td&gt;previous-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          q&lt;/td&gt;
&lt;td&gt;display-panes&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          r&lt;/td&gt;
&lt;td&gt;refresh-client&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          s&lt;/td&gt;
&lt;td&gt;choose-session&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          t&lt;/td&gt;
&lt;td&gt;clock-mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          w&lt;/td&gt;
&lt;td&gt;choose-window&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          x&lt;/td&gt;
&lt;td&gt;kill-pane&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          {&lt;/td&gt;
&lt;td&gt;swap-pane -U&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          }&lt;/td&gt;
&lt;td&gt;swap-pane -D&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key          ~&lt;/td&gt;
&lt;td&gt;show-messages&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key      PPage&lt;/td&gt;
&lt;td&gt;copy-mode -u&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key -r      Up&lt;/td&gt;
&lt;td&gt;select-pane -U&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key -r    Down&lt;/td&gt;
&lt;td&gt;select-pane -D&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key -r    Left&lt;/td&gt;
&lt;td&gt;select-pane -L&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key -r   Right&lt;/td&gt;
&lt;td&gt;select-pane -R&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;bind-key        M-1&lt;/td&gt;
&lt;td&gt;select-layout even-horizontal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;一些链接&#34;&gt;一些链接：&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://abyssly.com/2013/11/04/tmux_intro/&#34;&gt;tmux入门指南 | Abyssly&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.freebsdchina.org/software/t/tmux&#34;&gt;使用tmux [FreeBSDChina Wiki]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://superuser.com/questions/755634/how-to-quickly-switch-to-n-10-windows-in-tmux&#34;&gt;keyboard shortcuts - How to quickly switch to n.10+ windows in tmux - Super User&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>七周七语言之Prolog学习笔记</title>
      <link>https://blog.kk17.net/post/seven-days-seven-languages-prelog/</link>
      <pubDate>Fri, 08 May 2015 10:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/seven-days-seven-languages-prelog/</guid>
      
        <description>

&lt;h2 id=&#34;有关于prolog&#34;&gt;有关于Prolog&lt;/h2&gt;

&lt;p&gt;Prolog是一门逻辑编程语言，它于1972年由Alain Colmerauer和Phillipe Roussel开发完成，在
自然语言处理领域颇受欢迎。在Prolog中，数据以逻辑规则的形式存在，下面是基本
构建单元。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;事实。事实是关于真实世界的基本断言。（Babe是一头猪，猪喜欢泥巴。）&lt;/li&gt;
&lt;li&gt;规则。规则是关于真实世界中一些事实的推论。（如果一个动物是猪，那么它喜欢泥巴。）&lt;/li&gt;
&lt;li&gt;查询。查询是关于真实世界的一个问题。（Babe喜欢泥巴吗？）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;事实和规则被放入一个知识库（knowledge base）。Prolog编译器将这个知识库编译成一种适
于高效查询的形式。&lt;br /&gt;
在Prolog中，第一个字母的大小写是有着重要意义的，如果一个词以小写字母开头，它就是一个原子（atom）——一个类似Ruby符号（symbol）的固定值，如果一个词以大写字母或下划线开头，那么它就是一个变量。变量的值可以改变，原子则不能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;likes(wallace,cheese). //事实
likes(grommit,cheese).
likes(wendolene,sheep).

friend(X,Y) :- \+(X = Y), likes(X, Z), likes(Y, Z). //规则，\+执行逻辑取反操作，\+(X=Y)表示X不等于Y

| ？- friend(grommit， wallace). //查询
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Prolog让你通过事实和推论来表达逻辑，然后直接提问即可。
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;合一&#34;&gt;合一&lt;/h3&gt;

&lt;p&gt;合一的意思是“找出那些使规则两侧匹配的值”&lt;/p&gt;

&lt;h2 id=&#34;第一天自习&#34;&gt;第一天自习&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;建立一个知识库，描述你最喜欢的书籍和其作者。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%--列出书籍
book(&#39;Zen and the Art of Motorcycle Maintenance&#39;).
book(&#39;Seven Languages in Seven Weeks&#39;).
book(&#39;Introduction to Algorithms&#39;).
book(&#39;Design Patterns&#39;).
book(&#39;Effective Java&#39;).

%--列出作者
author(&#39;Bruce A.Tate&#39;).
author(&#39;Erich Gamma&#39;).
author(&#39;Richard Helm&#39;).
author(&#39;Ralph Johnson&#39;).
author(&#39;John Vlissides&#39;).
author(&#39;Thomas H.Cormen&#39;).
author(&#39;Charles E.Leiserson&#39;).
author(&#39;Ronald L.Rivest&#39;).
author(&#39; Clifford Stein&#39;).
author(&#39;Joshua Bloch&#39;).
author(&#39;Robert M. Pirsig&#39;).

book_author(&#39;Zen and the Art of Motorcycle Maintenance&#39;,&#39;Robert M. Pirsig&#39;).
book_author(&#39;Seven Languages in Seven Weeks&#39;,&#39;Bruce A.Tate&#39;).
book_author(&#39;Introduction to Algorithms&#39;,&#39;Thomas H.Cormen&#39;).
book_author(&#39;Introduction to Algorithms&#39;,&#39;Charles E.Leiserson&#39;).
book_author(&#39;Introduction to Algorithms&#39;,&#39;Ronald L.Rivest&#39;).
book_author(&#39;Introduction to Algorithms&#39;,&#39; Clifford Stein&#39;).
book_author(&#39;Effective Java&#39;,&#39;Joshua Bloch&#39;).
book_author(&#39;Design Patterns&#39;,&#39;Erich Gamma&#39;).
book_author(&#39;Design Patterns&#39;,&#39;Richard Helm&#39;).
book_author(&#39;Design Patterns&#39;,&#39;Ralph Johnson&#39;).
book_author(&#39;Design Patterns&#39;,&#39;John Vlissides&#39;).

%--定义共同作者
coauthor( FirstAuthor, SecondAuthor ) :-
(FirstAuthor \= SecondAuthor),
author( FirstAuthor ),
author( SecondAuthor ),
book_author( SomeBook ,FirstAuthor),
book_author( SomeBook, SecondAuthor).

%--定义非共同作者
notCoauthor( FirstAuthor, SecondAuthor ) :-
(FirstAuthor \= SecondAuthor),
\+coauthor( FirstAuthor, SecondAuthor ).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查询&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GNU Prolog 1.4.4 (64 bits)
Compiled Apr 23 2013, 16:05:07 with cl
By Daniel Diaz
Copyright (C) 1999-2013 Daniel Diaz
| ?- consult(&#39;D:/PrologCodes/books.pl&#39;).
compiling D:/PrologCodes/books.pl for byte code...
D:/PrologCodes/books.pl compiled, 45 lines read - 4452 bytes written, 8 ms

yes
| ?- book(Whatbook).

Whatbook = &#39;Zen and the Art of Motorcycle Maintenance&#39; ? ;

Whatbook = &#39;Seven Languages in Seven Weeks&#39; ? ;

Whatbook = &#39;Introduction to Algorithms&#39; ? ;

Whatbook = &#39;Design Patterns&#39; ? ;

Whatbook = &#39;Effective Java&#39;

(16 ms) yes
| ?- author(Author).

Author = &#39;Bruce A.Tate&#39; ? ;

Author = &#39;Erich Gamma&#39; ? ;

Author = &#39;Richard Helm&#39; ? ;

Author = &#39;Ralph Johnson&#39; ? ;

Author = &#39;John Vlissides&#39; ? ;

Author = &#39;Thomas H.Cormen&#39; ? ;

Author = &#39;Charles E.Leiserson&#39; ? ;

Author = &#39;Ronald L.Rivest&#39; ? ;

Author = &#39; Clifford Stein&#39; ? ;

Author = &#39;Joshua Bloch&#39; ? ;

Author = &#39;Robert M. Pirsig&#39;

| ?- book_author(&#39;Design Patterns&#39;,Author).

Author = &#39;Erich Gamma&#39; ? ;

Author = &#39;Richard Helm&#39; ? ;

Author = &#39;Ralph Johnson&#39; ? ;

Author = &#39;John Vlissides&#39;

yes

| ?- coauthor(&#39;Erich Gamma&#39;,&#39;Richard Helm&#39;).

true ? ;

no

| ?- notCoauthor(&#39;Erich Gamma&#39;,&#39;Richard Helm&#39;).

no
| ?- coauthor(&#39;Bruce A.Tate&#39;,&#39;Erich Gamma&#39;).

no
| ?- coauthor(&#39;Bruce A.Ta1te&#39;,&#39;Erich Gamma&#39;).

no
| ?- notCoauthor(&#39;Erich Gamma&#39;,&#39;Richard Helm&#39;).

no
| ?- book_author(SomeBook,&#39;Erich Gamma&#39;).

SomeBook = &#39;Design Patterns&#39; ? ;

no
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;第二天自习&#34;&gt;第二天自习&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;斐波那契数列和阶乘的实现。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fib(1,1).
fib(2,1).
fib(N,Ret) :- N &amp;gt; 2, N1 is N -1, N2 is N -2, fib(N1,Prv1), fib(N2,Prv2), Ret is Prv2 + Prv1.

factorial(0,1).
factorial(1,1).
factorial(N,Ret) :-  N &amp;gt; 1, N1 is N - 1, factorial(N1, Ret1), Ret is N * Ret1.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;汉诺塔问题&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%--参考了网上的实现
hanoi(N) :- move(N,left,middle,right).

move(1,A,_,C) :- inform(A,C), !. %-- 此处的!作用不太明白
move(N,A,B,C) :- N1 is N - 1,
    move(N1,A,C,B),
    inform(A,C),
    move(N1,B,A,C).

inform(Loc1,Loc2) :- nl,write(&#39;Move a disk from &#39;-Loc1-&#39; to &#39;-Loc2).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;翻转列表元素&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reverse_list([],[]).
reverse_list(List,ReverseList) :- List = [Head|Tail],
         reverse_list(Tail, ReverseTail),
         append(ReverseTail,[Head],ReverseList).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;找出列表最小元素&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find_min([E],E).
find_min(List,Min) :- List = [Head|Tail], find_min(Tail,Min2), Min is min(Head,Min2).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对列表元素进行排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sort_list([],[]).
sort_list(List,SortedList) :- List = [Head|Tail],
    sort_list(Tail,SortedTail),
    merge_list(Head,SortedTail,SortedList).

merge_list(E,[],[E]).
merge_list(E1,SortedTail,MergedList) :- SortedTail = [E2|Tail],
    (E1 &amp;lt; E2 -&amp;gt;
        append([E1],SortedTail,MergedList);
        merge_list(E1,Tail,MergedTail),
        append([E2],MergedTail,MergedList)
    ).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;第三天自习&#34;&gt;第三天自习&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;9x9数独问题。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;valid([]).
valid([Head|Tail]) :-
    fd_all_different(Head),
    valid(Tail).

sudoku(Puzzle, Solution) :- Solution = Puzzle ,
    Puzzle = [S11,S12,S13,S14,S15,S16,S17,S18,S19,
    S21,S22,S23,S24,S25,S26,S27,S28,S29,
    S31,S32,S33,S34,S35,S36,S37,S38,S39,
    S41,S42,S43,S44,S45,S46,S47,S48,S49,
    S51,S52,S53,S54,S55,S56,S57,S58,S59,
    S61,S62,S63,S64,S65,S66,S67,S68,S69,
    S71,S72,S73,S74,S75,S76,S77,S78,S79,
    S81,S82,S83,S84,S85,S86,S87,S88,S89,
    S91,S92,S93,S94,S95,S96,S97,S98,S99],
    fd_domain(Puzzle,1,9),

    Row1=[S11,S12,S13,S14,S15,S16,S17,S18,S19],
    Row2=[S21,S22,S23,S24,S25,S26,S27,S28,S29],
    Row3=[S31,S32,S33,S34,S35,S36,S37,S38,S39],
    Row4=[S41,S42,S43,S44,S45,S46,S47,S48,S49],
    Row5=[S51,S52,S53,S54,S55,S56,S57,S58,S59],
    Row6=[S61,S62,S63,S64,S65,S66,S67,S68,S69],
    Row7=[S71,S72,S73,S74,S75,S76,S77,S78,S79],
    Row8=[S81,S82,S83,S84,S85,S86,S87,S88,S89],
    Row9=[S91,S92,S93,S94,S95,S96,S97,S98,S99],
    Col1=[S11, S21, S31, S41, S51, S61, S71, S81, S91],
    Col2=[S12, S22, S32, S42, S52, S62, S72, S82, S92],
    Col3=[S13, S23, S33, S43, S53, S63, S73, S83, S93],
    Col4=[S14, S24, S34, S44, S54, S64, S74, S84, S94],
    Col5=[S15, S25, S35, S45, S55, S65, S75, S85, S95],
    Col6=[S16, S26, S36, S46, S56, S66, S76, S86, S96],
    Col7=[S17, S27, S37, S47, S57, S67, S77, S87, S97],
    Col8=[S18, S28, S38, S48, S58, S68, S78, S88, S98],
    Col9=[S19, S29, S39, S49, S59, S69, S79, S89, S99],

    Square1=[S11,S12,S13, S21,S22,S23, S31,S32,S33],
    Square2=[S14,S15,S16, S24,S25,S26, S34,S35,S36],
    Square3=[S17,S18,S19, S27,S28,S29, S37,S38,S39],
    Square4=[S41,S42,S43, S51,S52,S53, S61,S62,S63],
    Square5=[S44,S45,S46, S54,S55,S56, S64,S65,S66],
    Square6=[S47,S48,S49, S57,S58,S59, S67,S68,S69],
    Square7=[S71,S72,S73, S81,S82,S83, S91,S92,S93],
    Square8=[S74,S75,S76, S84,S85,S86, S94,S95,S96],
    Square9=[S77,S78,S79, S87,S88,S89, S97,S98,S99],

    valid([Row1, Row2, Row3, Row4, Row5, Row6, Row7, Row8, 
        Row9, Col1, Col2, Col3, Col4, Col5, Col6, Col7, Col8, Col9,
        Square1, Square2, Square3, Square4, Square5, Square6,
        Square7, Square8, Square9]),

    write( &#39;\n&#39; ), write( Row1 ),
    write( &#39;\n&#39; ), write( Row2 ),
    write( &#39;\n&#39; ), write( Row3 ),
    write( &#39;\n&#39; ), write( Row4 ),
    write( &#39;\n&#39; ), write( Row5 ),
    write( &#39;\n&#39; ), write( Row6 ),
    write( &#39;\n&#39; ), write( Row7 ),
    write( &#39;\n&#39; ), write( Row8 ),
    write( &#39;\n&#39; ), write( Row9 ).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>七周七语言之IO学习笔记</title>
      <link>https://blog.kk17.net/post/seven-days-seven-languages-io/</link>
      <pubDate>Fri, 08 May 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/seven-days-seven-languages-io/</guid>
      
        <description>

&lt;h2 id=&#34;io简介&#34;&gt;Io简介&lt;/h2&gt;

&lt;p&gt;大多数的Io社区都致力于将Io作为带有微型虚拟机和丰富并发特性的可嵌入语言来推广。&lt;br /&gt;
Io的核心优势是拥有大量可定制的语法和函数，以及强有力的并发模型。&lt;br /&gt;
在Io中，万事万物皆为消息，且每条消息都灰返回另一接受消息的对象。Io这门语言没有关键字，有的只是少量在行为上接近于关键字的字符。&lt;/p&gt;

&lt;h2 id=&#34;对象-原型和继承&#34;&gt;对象、原型和继承&lt;/h2&gt;

&lt;p&gt;Io是一门原型语言，所有的对象都有原型，对象还带有槽（slot，相当于类的域和方法？？）。&lt;br /&gt;
槽的相关操作&lt;br /&gt;
 1.  &lt;code&gt;:=&lt;/code&gt;当槽不存在，Io会创建一个槽，然后赋值&lt;br /&gt;
 2.  &lt;code&gt;=&lt;/code&gt;给槽赋值，如果槽不存在，抛出异常&lt;br /&gt;
 3.  &lt;code&gt;::=&lt;/code&gt;新建槽
 4.  type 任何对象都有type这个槽，返回对象的原型&lt;br /&gt;
 5.  slotNames返回对象的槽名列表&lt;br /&gt;
 6.  getSlot(name)获取槽的内容，如果槽不存在会获取父对象的槽&lt;/p&gt;

&lt;p&gt;Io的类型是一个非常好的机制。从惯用的角度说，以大写开开头的对象时类型，因此Io会对它设置type槽。而类型的复制品若以小写开头则会调用它父对象的type槽。&lt;br /&gt;
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&#34;方法&#34;&gt;方法&lt;/h2&gt;

&lt;p&gt;方法是槽的一种？&lt;br /&gt;
方法也是对象，和其它类型的对象一样，你可以获取它的类型。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt;method() type  
==&amp;gt;Block  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lobby是主命名空间（相当于浏览器中javascript的window？），包含所有已命名的对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt; Lobby
  Protos           = Object_0x1dac868
  _                = Object_0x1dac8c8
  exit             = method(...)
  forward          = method(...)
  set_             = method(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;所有事物都是对象；&lt;/li&gt;
&lt;li&gt;所有与对象的交互都是消息&lt;/li&gt;
&lt;li&gt;你要做的不是实例化类，而是复制那些叫做原型的对象&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对象会记住它的原型&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;对象有槽&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;槽包含对象（包括方法对象）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;消息返回槽中的值，或调用槽中的方法&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;如果对象无法响应某消息，它则会把消息发送给自己的原型&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;单例&#34;&gt;单例&lt;/h3&gt;

&lt;p&gt;true、false和nil都是单例（singleton），对它们进行复制，返回的只是单例对象的值。构建单例只需重定义clone方法，让它返回单例对象自身即可。&lt;/p&gt;

&lt;h2 id=&#34;第一天自习&#34;&gt;第一天自习&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对1+1求值，然后对1+&amp;ldquo;one&amp;rdquo;求值。Io是强类型还是弱类型？用代码证实你的答案。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt; 1+1
==&amp;gt; 2
Io&amp;gt; 1+&amp;quot;one&amp;quot;

Exception: argument 0 to method &#39;+&#39; must be a Number, not a &#39;Sequence&#39;
---------
message &#39;+&#39; in &#39;Command Line&#39; on line 1

Io&amp;gt; &amp;quot;1&amp;quot;+&amp;quot;one&amp;quot;

Exception: Io Assertion &#39;operation not valid on non-number encodings&#39;
---------
message &#39;+&#39; in &#39;Command Line&#39; on line 1

Io&amp;gt; &amp;quot;1&amp;quot; .. &amp;quot;one&amp;quot;
==&amp;gt; 1one
Io&amp;gt; 1 .. &amp;quot;one&amp;quot;
==&amp;gt; 1one
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;0是true还是false？空字符串是true还是false？nil是true还是false？用代码证实你的答案。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt; if( 0 , true println,false println)
true
==&amp;gt; true
Io&amp;gt; if( &amp;quot;&amp;quot; , true println,false println)
true
==&amp;gt; true
Io&amp;gt; if( nil , true println,false println)
false
==&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如何知道某个原型具有哪些槽？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt; Sequence slotNames foreach(println)
log
linePrint
beforeSeq
pathComponent
urlDecoded
removeSeq
bitwiseAnd
removeOddIndexes
uppercase
findSeq
replaceSeq
cPrint
logicalOr
...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;=、:=、::=&lt;/code&gt;之间有什么区别？你会在什么时候使用它们？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt; OperatorTable
==&amp;gt; OperatorTable_0x951180:
Operators
  0   ? @ @@
  ...

Assign Operators
  ::= newSlot
  :=  setSlot
  =   updateSlot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际测试没有发现::=与:=的区别。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从文件中运行Io程序。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;D:\IoCodes&amp;gt;cat sum.io
sum := 0
for(i,1,100,
        sum = sum + i
)
sum println

D:\IoCodes&amp;gt;io sum.io
5050
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;运算符&#34;&gt;运算符&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Io&amp;gt; OperatorTable addOperator(&amp;quot;xor&amp;quot;,11)
==&amp;gt; OperatorTable_0x1d61180:
Operators
  ...
  10  &amp;amp;&amp;amp; and
  11  or xor ||
  12  ..
  13  %= &amp;amp;= *= += -= /= &amp;lt;&amp;lt;= &amp;gt;&amp;gt;= ^= |=
  14  return

Assign Operators
  ::= newSlot
  :=  setSlot
  =   updateSlot

To add a new operator: OperatorTable addOperator(&amp;quot;+&amp;quot;, 4) and implement the + message.
To add a new assign operator: OperatorTable addAssignOperator(&amp;quot;=&amp;quot;, &amp;quot;updateSlot&amp;quot;) and implement the updateSlot   message.

Io&amp;gt; true xor := method(bool,if(bool,false,true))
==&amp;gt; method(bool,
    if(bool, false, true)
)
Io&amp;gt; false xor := method(bool,if(bool,true,false))
==&amp;gt; method(bool,
    if(bool, true, false)
)
Io&amp;gt; true xor false
==&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;消息&#34;&gt;消息&lt;/h2&gt;

&lt;p&gt;在Io中，几乎一切都是消息。一个消息由三部分组成：发送者（sender)、目标（target）、参数（arguments）。你可以用call方法访问任何消息的元信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//msg.io
MsgReceiver := Object clone
MsgReceiver receive := method(
    &amp;quot;message name is : &amp;quot; print
    call message name println

    &amp;quot;sender is :&amp;quot; println
    call sender  println

    &amp;quot;target is :&amp;quot; println
    call target  println

    &amp;quot;arguments is :&amp;quot; println
    call message arguments  println

    &amp;quot;arguments[0] is : &amp;quot; print
    call message argAt(0)  println
    &amp;quot;arguments[0] is : &amp;quot; print
    call argAt(0)  type println
    &amp;quot;arguments[0] is : &amp;quot; print
    call evalArgAt(0)  type println
)

MsgSender := Object clone
MsgSender send := method(
    &amp;quot;message name is : &amp;quot; print
    call message name println

    &amp;quot;sender is :&amp;quot; println
    call sender  println

    &amp;quot;target is :&amp;quot; println
    call target  println
    receiver := MsgReceiver clone
    receiver receive(&amp;quot;hollo world!&amp;quot;)
)

sender := MsgSender clone
sender send

//result:
message name is : send
sender is :
 Object_0x44c890:
  Lobby            = Object_0x44c890
  MsgReceiver      = MsgReceiver_0x2171178
  MsgSender        = MsgSender_0x2171238
  Protos           = Object_0x44c830
  _                = nil
  exit             = method(...)
  forward          = method(...)
  sender           = MsgSender_0x21712c8
  set_             = method(...)

target is :
 MsgSender_0x21712c8:

message name is : receive
sender is :
 MsgSender_0x21712c8:

target is :
 MsgReceiver_0x217c368:

arguments is :
list(&amp;quot;hollo world!&amp;quot;)
arguments[0] is : &amp;quot;hollo world!&amp;quot;
arguments[0] is : Message
arguments[0] is : Sequence
[Finished in 0.2s]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，send方法的发送者是全局对象Lobby。
evalArgAt和argAt是两者间的区别：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;evalArgAt(argNumber)&lt;br /&gt;
 Evaluates the specified argument of the Call’s message in the context of it’s sender.&lt;/p&gt;

&lt;p&gt;argAt(argNumber)&lt;br /&gt;
  Returns the message’s argNumber arg. Shorthand for same as call message argAt(argNumber).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;大多数语言都将参数作为栈上的值传递，但是Io不是这样。Io传递的是消息本身和上下文，在由接受者对消息求值。实际上你可以用消息实现控制结构。&lt;/p&gt;

&lt;h2 id=&#34;反射&#34;&gt;反射&lt;/h2&gt;

&lt;p&gt;在Io中，处理反射分为两个部分。在邮局那个例子中，是消息反射。对象反射是处理对象和对象的槽。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Object ancestors := method(
    prototype := self proto
    if(prototype !=Object,
    writeln(&amp;quot;Slots of &amp;quot;,prototype type,&amp;quot;\n---------------------&amp;quot;)
    prototype slotNames foreach(slotName, writeln(slotName))
    writeln
    prototype ancestors))

Animal := Object clone
Animal speak := method(
    &amp;quot;ambigulous animal noise&amp;quot; println
)

Duck := Animal clone
Duck speak := method(
    &amp;quot;quack&amp;quot; println
)

Duck walk := method(
    &amp;quot;waddle&amp;quot; println
)

disco := Duck clone
disco ancestors

disco walk

disco speak

***************output:*******************
Slots of Duck
---------------------
walk
speak
type

Slots of Animal
---------------------
speak
type

waddle
quack
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第二天自习&#34;&gt;第二天自习&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;计算斐波那契数列的递归和循环两种方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fib := method(n,
    if(n ==1 or n == 2) then(
        return 1
    ) else (
        return (fib(n-1) + fib(n-2))
    )
)

fib2 := method(n,
    if(n == 1) then (
        return 1
    ) else (
        prv1 := 1
        prv2 := 0
        cur := 0
        for(i,2,n,
            cur = prv1 + prv2
            prv2 = prv1
            prv1 = cur
        )
        return cur
    )
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在分母为0的情况下如何让运算符/返回0？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Number setSlot(&amp;quot;coreDivision&amp;quot;, Number getSlot(&amp;quot;/&amp;quot;))

Number / = method(n,
    if(n==0) then(
        return 0
    )else(
        return (self coreDivision(n))
    )
)

(4/0) println

(8/4) println

(16/8) println

(16 / -8) println
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;写一个程序，把二维数组的所有数相加&lt;br /&gt;
Io中没有Array这个原型，所以用List代替数组&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sum := method(arr,
    if(arr type != &amp;quot;List&amp;quot;) then(
        return 0
    )
    sum := 0
    arr foreach(e,
        if(e type != &amp;quot;List&amp;quot;) then(
            continue
        )
        if(e size &amp;lt; 2) then(
            continue
        )
        sum = sum + e at(0)
        sum = sum + e at(1)
    )
    return sum
)

sum(list(list(3,4),list(5))) println
sum(list(7,8)) println

************output*************
7
0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对列表增加一个名为myAverage的槽，以计算所有数字的平均值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List myAverage := method(
    if(self isEmpty) then( return 0 )
    sum := 0
    self foreach(e,
        if(e type != &amp;quot;Number&amp;quot;) then(
            Exception raise(&amp;quot;List member is not a number&amp;quot;) 
        )
        sum = sum + e
    )
    avg := sum / self size
)

list() myAverage println
list(3,4,5,1.2) myAverage println
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;对二维矩阵写一个原型。该原型dim的方法可为一个包含y个列表的列表分配内存，其中每个列表有x个元素，set(x,y) 方法可以设置类别中的值，get(x,y)方法可返回列表中的值。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TwoDArray := Object clone
TwoDArray dim := method(x,y,
    self data := list()
    for(i,0,x-1,
        innerList := list()
        for(j,0,y-1,
            innerList append(nil)
        )
        data append(innerList)
    )
)

TwoDArray set := method(x,y,e,
    outterList := self data
    if(x &amp;gt; outterList size, return)
    innerList := outterList at(x)
    if(y &amp;gt; innerList size, return)
    innerList atPut(y,e)
)

TwoDArray get := method(x,y,
    outterList := self data
    if(x &amp;gt; outterList size, return nil)
    innerList := outterList at(x)
    if(y &amp;gt; innerList size, return nil)
    innerList at(y)
)


arr2 := TwoDArray clone
arr2 dim(3,4)
arr2 set(1,2,3)
arr2 set(1,10,3)
arr2 get(1,2) println
arr2 get(1,10) println
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dim(x,y)分配了包含x个列表的列表，每个子列表有y个元素，与题目有点不同，但觉得这样更好理解。  代码没有对数组下标越界抛出异常，抛出异常应该更好。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;写一个转置方法，是原列表上的matrix get(x,y)与转置后的列表(new_matrix get(y,x))相等。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TwoDArray transpose := method(
    outterList := self data
    y := outterList size
    innerList := outterList at(0)
    x := innerList size
    ret := TwoDArray clone
    ret dim(x, y)
    for(i,0,x-1,
        for(j,0,y-1,
            ret set(i, j, self get(j, i))
        )
    )
    return ret
)


arr2 := TwoDArray clone
arr2 dim(3,4)
arr2 set(1,2,3)
arr2 set(1,10,3)
arr2 get(1,2) println
arr2 get(1,10) println
&amp;quot;-----------&amp;quot; println
arr3 := arr2 transpose
arr3 get(2,1) println
arr3 get(10,1) println
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;将文件写入矩阵，并从文件读取矩阵&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TwoDArray writeMatrix := method(filePath,
    f := File with(filePath)
    f remove
    f openForUpdating
    outterList := self data
    x := outterList size
    y := outterList at(0) size
    f write((x .. &amp;quot;,&amp;quot; .. y .. &amp;quot;\n&amp;quot;))
    outterList foreach(e,
        line := &amp;quot;&amp;quot;
        e foreach(e2,
            line = line .. e2 .. &amp;quot;,&amp;quot;
        )
        f write(line exSlice(0,-1),&amp;quot;\n&amp;quot;)
    )
    f close
)


TwoDArray readMatrix := method(filePath,
    f := File with(filePath)
    f openForReading
    line := f readLine
    d := line split(&amp;quot;,&amp;quot;)
    x := d at(0) asNumber
    y := d at(1) asNumber
    ret := TwoDArray clone
    ret dim(x,y)
    writeln(&amp;quot;x=&amp;quot;,x,&amp;quot;, y=&amp;quot;,y)
    i := 0
    j := 0
    f readLines foreach(line,
        list := line split(&amp;quot;,&amp;quot;)
        j = 0
        list foreach(e,
            writeln(i,&amp;quot;x&amp;quot;,j,&amp;quot;=&amp;quot;,e)
            if(e != &amp;quot;nil&amp;quot;,ret set(i,j,e))
            j = j + 1
        )
        i = i +1
    )
    f close
    return ret
)


TwoDArray writeMatrix2 := method(filePath,
    f := File with(filePath)
    f remove
    f openForUpdating
    f write(self serialized())
    f close
)

TwoDArray readMatrix2 := method(filePath,
    ret := doFile(filePath)
    return ret
)


arr2 := TwoDArray clone
arr2 dim(3,4)
arr2 set(1,2,3)
arr2 set(1,10,3)
arr2 get(1,2) println
arr2 get(1,10) println
&amp;quot;-----------&amp;quot; println
arr3 := arr2 transpose
arr3 get(2,1) println
arr3 get(10,1) println

arr3 writeMatrix(&amp;quot;./test.dt&amp;quot;)

arr4 := TwoDArray readMatrix(&amp;quot;./test.dt&amp;quot;)

arr4 println
arr4 get(2,1) println
arr4 get(10,1) println

arr3 writeMatrix2(&amp;quot;./test2.dt&amp;quot;)

arr5 := TwoDArray readMatrix2(&amp;quot;./test2.dt&amp;quot;)

arr5 println
arr5 get(2,1) println
arr5 get(10,1) println
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;写一个程序，提供10次尝试机会，猜一个1~100之间的随机数。如果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GuessNumGame := Object clone
GuessNumGame init := method(
    self secretNum := Random value(1,101) floor
    self guessTimes := 0
    self lowBoundry := 0
    self highBoundry := 100
    secretNum println
)

GuessNumGame guess := method(x,
    guessTimes println
    if(guessTimes &amp;gt; 10) then(
        &amp;quot;You had guess over 10 times! Game over!&amp;quot; println
        return
    )
    if(x &amp;lt; secretNum) then(
        if(x &amp;gt; lowBoundry,lowBoundry = x)
        writeln(&amp;quot;You guess lowwer. You can guess between &amp;quot;,lowBoundry,&amp;quot; to &amp;quot;,highBoundry)
    ) elseif(x == self secretNum) then(
        writeln(&amp;quot;Congratulations! You got the right number!&amp;quot;)
    ) else(
        if(x &amp;lt; highBoundry, highBoundry = x)
        writeln(&amp;quot;You guess higher. You can guess between &amp;quot;,lowBoundry,&amp;quot; to &amp;quot;,highBoundry)
    )
    guessTimes = guessTimes + 1
)

game := GuessNumGame clone
game guess(10)
game guess(50)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;领域特定语言&#34;&gt;领域特定语言&lt;/h2&gt;

&lt;p&gt;几乎每一个研究过Io语言的人，都会对它在DSL方面的强大赞不绝口。下面实现一种有趣的电话号码语法的API。&lt;br /&gt;
比如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Bob smith&amp;quot;:&amp;quot;5195551212&amp;quot;,
    &amp;quot;Mary Walsh&amp;quot;:&amp;quot;4162223434&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决这一个问题的办法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OperatorTable addAssignOperator(&amp;quot;:&amp;quot;,&amp;quot;atPutNumber&amp;quot;)
curlyBrackets := method(
    r := Map clone
    call message arguments foreach(arg,
        r doMessage(arg)
    )
    r
)

Map atPutNumber := method(
    self atPut(
        call evalArgAt(0) asMutable removePrefix(&amp;quot;\&amp;quot;&amp;quot;) removeSuffix(&amp;quot;\&amp;quot;&amp;quot;),
        call evalArgAt(1)
    )
)

s := File with(&amp;quot;phonebook.txt&amp;quot;) openForReading contents
phoneNumbers := doString(s)  //doString把电话号码簿求值为Io代码
phoneNumbers keys println
phoneNumbers values println
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;io的method-messing&#34;&gt;Io的method_messing&lt;/h2&gt;

&lt;p&gt;就像Ruby的method_missing那样，你也可以用Io的forward消息做到同样的事，但是这样做的风险会高一些。Io没有类，所以改变forward也将改变从Object获得的基本行为方式。&lt;br /&gt;
XML是对数据进行结构化的绝妙方式，但是却有着令人作呕的语法。为了摆脱这语法，你可以写一个程序，用Io代码来表示XML数据。
假如你想把下面的数据：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;
This is a simple paragraph.
&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示成：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body(
    p(&amp;quot;This is a simple paragraph.&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们把这种新语言称作LispML。我们将用Io的forward处理这门语言，就像处理不存在的方法一样（missing_method）。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Builder := Object clone
Builder forward := method(
    writeln(&amp;quot;&amp;lt;&amp;quot;,call message name,&amp;quot;&amp;gt;&amp;quot;)
        call message arguments foreach(arg,
            content := self doMessage(arg)
            if(content type == &amp;quot;Sequence&amp;quot;, writeln(content))
        )
    writeln(&amp;quot;&amp;lt;/&amp;quot;,call message name,&amp;quot;&amp;gt;&amp;quot;)
)

Builder ul(
    li(&amp;quot;IO&amp;quot;),
    li(&amp;quot;Lua&amp;quot;),
    li(&amp;quot;Javascript&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;并发&#34;&gt;并发&lt;/h2&gt;

&lt;p&gt;Io有非常出色的并发库，其主要组成部分包括协程、actor和future。&lt;/p&gt;

&lt;h3 id=&#34;1-协程&#34;&gt;1.协程&lt;/h3&gt;

&lt;p&gt;协程是并发的基础。它提供了进程自动挂起和恢复执行的机制。你可以把协程想象成有多个入口和出口的函数。每次yield都会自动挂起当前进程，并把控制转到另一个进程中。
通过在消息前加上@或@@，你可以异步触发消息，前者将返回future，后者会返回nil，并在其自身线程中触发消息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vizzini := Object clone
vizzini talk := method(
    &amp;quot;Fezzik, are there rooks ahead?&amp;quot; println
    yield
    &amp;quot;No more rhymes now, I mean it.&amp;quot; println
    yield
)

fezzik := Object clone
fezzik rhyme := method(
    yield
    &amp;quot;If there are, we&#39;ll all be dead.&amp;quot; println
    yield
    &amp;quot;Anybody want a peanut?&amp;quot; println
)

vizzini @@talk
fezzik @@rhyme

Coroutine currentCoroutine pause
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;协程是组成更高级抽象概念（如actor）的基本元素。你可以把actor想象成通用的并发原语，它可以发送消息、处理消息以及创建其它actor。actor接收到的消息是并发的。在Io中，actor把新到达的消息放到队列上，并用协程处理队列中的各个消息。&lt;/p&gt;

&lt;h3 id=&#34;2-actor&#34;&gt;2.Actor&lt;/h3&gt;

&lt;p&gt;和线程相比，actor有巨大的理论优势。一个actor可以改变其自身状态，并且通过严格控制的队列接触其它actor。而多个线程可以不受限制地改变状态。线程容易接受到被称为竞争条件的并发影响。在这种问题中，如果两个线程同时存取资源，可能导致不可预测的后果。&lt;br /&gt;
Io的动人之处就在于此，发送异步消息给任何对象就是actor，就这么简单。举一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;slower := Object clone
faster := Object clone

slower start := method(
    wait(2)
    writeln(&amp;quot;slowly&amp;quot;)
)

faster start := method(
    wait(1)
    writeln(&amp;quot;quickly&amp;quot;)
)

slower start
faster start
&amp;quot;======================&amp;quot; println
slower @@start
faster @@start
Coroutine currentCoroutine pause
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-future&#34;&gt;3.future&lt;/h3&gt;

&lt;p&gt;在Io中，future并不是代理实现。future会阻塞到可获得结果为止。future的值一开始是个future对象，但等到结果产生之后，所有future值的实例都会指向结果对象。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;futureResult := URL with(&amp;quot;http://google.com/&amp;quot;) @fetch
writeln(&amp;quot;doing other thing ...&amp;quot;)
wait(2)
writeln(&amp;quot;fetched,&amp;quot; futureResult size,&amp;quot; bytes&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在windows下运行上面代码出现Exception: Object does not respond to &amp;lsquo;URL&amp;rsquo;异常，google了一下，未能解决，望高手指点。&lt;/p&gt;

&lt;h2 id=&#34;第三天自习&#34;&gt;第三天自习&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;改进本节生成的XML程序，增加空格以显示缩进结构。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Builder := Object clone
Builder indentSize := 4
Builder i := 0
Builder forward := method(
    (i * indentSize) repeat(write(&amp;quot; &amp;quot;))
    writeln(&amp;quot;&amp;lt;&amp;quot;,call message name,&amp;quot;&amp;gt;&amp;quot;)

    i = i + 1
    call message arguments foreach(arg,
        content := self doMessage(arg)
        if(content type == &amp;quot;Sequence&amp;quot;, 
            (i * indentSize) repeat(write(&amp;quot; &amp;quot;))
            writeln(content)
        )
    )
    i = i -1

    (i * indentSize) repeat(write(&amp;quot; &amp;quot;))
    writeln(&amp;quot;&amp;lt;/&amp;quot;,call message name,&amp;quot;&amp;gt;&amp;quot;)
)

Builder ul(
    li(p(&amp;quot;IO&amp;quot;)),
    li(&amp;quot;Lua&amp;quot;),
    li(&amp;quot;Javascript&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建一种使用括号的列表语法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;squareBrackets := method(       
  if(call message arguments asString containsSeq(&amp;quot;squareBrackets&amp;quot;) not,return call message arguments)       //如果不含子数组就直接返回参数列表,参数列表本来就是一个list
  list := List clone
  call message arguments foreach(arg,
   aArg := if(arg asString beginsWithSeq(&amp;quot;squareBrackets&amp;quot;),doMessage(arg),arg)
   list append(aArg)// 最后一行为返回值
  )
  list
)

[] println
[1,&amp;quot;kk&amp;quot;] println
[1,[&amp;quot;kk&amp;quot;,10.5]] println
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;改进本节生成xml程序，使其可以处理属性：如果第一个参数时映射（用大括号语法），则为xml添加属性。例如：&lt;br /&gt;
&lt;code&gt;book({&amp;quot;author&amp;quot;:&amp;quot;Tate&amp;quot;}...)&lt;/code&gt; 将打印出&lt;code&gt;&amp;lt;book author=&amp;quot;Tate&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OperatorTable addAssignOperator(&amp;quot;:&amp;quot;,&amp;quot;addAttribute&amp;quot;)

Builder := Object clone

Builder addAttribute := method(
    call message arguments println
    write(call evalArgAt(0))
    write(&amp;quot;=\&amp;quot;&amp;quot;,call evalArgAt(1),&amp;quot;\&amp;quot;&amp;quot;)
)

Builder curlyBrackets := method(
    call message arguments foreach(arg,
        self doMessage(arg)
    )
)



Builder indentSize := 4
Builder i := 0
Builder forward := method(
    (i * indentSize) repeat(write(&amp;quot; &amp;quot;))
    write(&amp;quot;&amp;lt;&amp;quot;,call message name)

    i = i + 1

    args :=call message arguments 
    arg1 := args at(0)
    if( arg1 asString beginsWithSeq(&amp;quot;curlyBrackets&amp;quot;),
        //arg1 println
        self doMessage(arg1)
        args remove(arg1)
    )
    writeln(&amp;quot;&amp;gt;&amp;quot;)
    args foreach(arg,
        content := self doMessage(arg)
        if(content type == &amp;quot;Sequence&amp;quot;, 
            (i * indentSize) repeat(write(&amp;quot; &amp;quot;))
            writeln(content)
        )
    )
    i = i -1

    (i * indentSize) repeat(write(&amp;quot; &amp;quot;))
    writeln(&amp;quot;&amp;lt;/&amp;quot;,call message name,&amp;quot;&amp;gt;&amp;quot;)
)


Builder ul(
    {&amp;quot;class&amp;quot; : &amp;quot;foo&amp;quot;,&amp;quot;id&amp;quot; : &amp;quot;language&amp;quot;},
    li(&amp;quot;Io&amp;quot;)
)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面代码会出现异常，不知道如何解决。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;ul
      Exception: Sequence does not respond to &#39;:&#39;
      ---------
      Sequence :                           builder.io 50
      Builder curlyBrackets                builder.io 50
      Builder ul                           builder.io 49
      CLI doFile                           Z_CLI.io 140
      CLI run     
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>《Effective Java》中文版第2版阅读笔记</title>
      <link>https://blog.kk17.net/post/effective-java-reading-note/</link>
      <pubDate>Thu, 07 May 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/effective-java-reading-note/</guid>
      
        <description>

&lt;h2 id=&#34;第2章-创建和销毁对象&#34;&gt;第2章 创建和销毁对象&lt;/h2&gt;

&lt;h3 id=&#34;第1条-考虑用静态工厂代替构造器&#34;&gt;第1条：考虑用静态工厂代替构造器&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;静态工厂的优点：&lt;/strong&gt;&lt;br /&gt;
1. 有名字&lt;br /&gt;
2. 不必每次调用都创建新的对象&lt;br /&gt;
3. 可以返回原类型的任何子类型（可以于服务者提供框架，如：JDBC、SLF4J）&lt;br /&gt;
4. 在创建参数化类型实例时代码更加简洁&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;静态工厂的缺点：&lt;/strong&gt;&lt;br /&gt;
1. 类如果不包含公有或受保护的构造器就不能被子类化（如Collections Framework中的一些实现类）&lt;br /&gt;
2. 与其它静态方法没有区别，在API文档没有明确标识&lt;/p&gt;

&lt;h3 id=&#34;第2条-遇到多个构造器参数时要考虑构建器&#34;&gt;第2条：遇到多个构造器参数时要考虑构建器&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder模式就是种不错的选择，特别时当大多数参数都是可选的时候。与使用传统的重叠构造器模式相比，使用Builder模式的代码将更易于阅读，构建器也比JavaBean更加安全。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;第3条-用私有构造器或者枚举类强化singleton属性&#34;&gt;第3条：用私有构造器或者枚举类强化Singleton属性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;单元素的枚举类型已经成为实现Singleton的最佳方法
&lt;!-- more --&gt;&lt;/p&gt;

&lt;h3 id=&#34;第4条-通过私有构造器强化不可实例化的能力&#34;&gt;第4条：通过私有构造器强化不可实例化的能力&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;企图通过将类做成抽象类来强制该类不可实例化，这是行不通的&lt;/strong&gt;。该类可以被子类化，并且该子类也可以被实例化。通过私有构造器可以强化不可实例化的能力：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;//Noinstantiable
private class UtilityClass {
    //suppress default constructor noninstantiability
    private UtilityClass(){
        throw AssertionError();
    }
    ... // Remainder omitted
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这种用法也有副作用，它使得一个类不能被子类化。&lt;/p&gt;

&lt;h3 id=&#34;第5条-避免创建不必要的对象&#34;&gt;第5条：避免创建不必要的对象&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;重用对象（对象池）&lt;/li&gt;
&lt;li&gt;延迟初始化（不建议，因为实现逻辑复杂）&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;为对象提供Adapter/View&lt;/li&gt;
&lt;li&gt;注意基本类型和装箱基本类型的使用&lt;/li&gt;
&lt;li&gt;保护性拷贝除外&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;第6条-消除过期的对象引用&#34;&gt;第6条：消除过期的对象引用&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;内存泄露的来源：&lt;/strong&gt;&lt;br /&gt;
1. 类自己管理内存&lt;br /&gt;
2. 缓存（可以使用 &lt;strong&gt;WeakHashMap&lt;/strong&gt; 代表缓存）&lt;br /&gt;
3. 监听器和其它回调（使用 &lt;strong&gt;WeakHashMap&lt;/strong&gt; )&lt;/p&gt;

&lt;h3 id=&#34;第7条-避免使用终结方法&#34;&gt;第7条：避免使用终结方法&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;终结方法的缺陷&lt;/strong&gt;&lt;br /&gt;
1.  Java语言规范不仅不保证终结方法会被及时执行，而且根本不保证它们会被执行。不应该依赖终结方法来更新重要的持久状态。&lt;br /&gt;
2.  终结过程中出现异常，异常会被忽略，终结过程中止。&lt;br /&gt;
3.  终结方法有非常严重的性能损失&lt;/p&gt;

&lt;p&gt;如果确实需要终结，使用显式的终结方法和cry-finally结构结合，如：InputStream,OutputStream上的close方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;子类的终结方法必须手工调用超类的终结方法，最好使用终结方法守卫者&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Finalier Guardian idiom
Public clss Foo {
    //Sole purpose of this object is to finalize outer Foo object
    private final Object finalizerGuardian = new Object(){
        @Override
        protected void finalize() throw Throwable{
            ...//Finalize outer Foo object
        }
    }
    ...// Remaider omitted
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第3章-对所以对象通用的方法&#34;&gt;第3章：对所以对象通用的方法&lt;/h2&gt;

&lt;h3 id=&#34;第8条-覆盖equals时请遵守通用约定&#34;&gt;第8条：覆盖equals时请遵守通用约定&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;equals方法通用约定（等价关系）：&lt;/strong&gt;&lt;br /&gt;
1. 自反性&lt;br /&gt;
2. 对称性&lt;br /&gt;
3. 传递性&lt;br /&gt;
4. 一致性&lt;br /&gt;
5. 非空性（Non-Nullity）&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们无法在扩展可示例化的类的同时，即增加新的值组件，同时又保留equals约定&lt;/strong&gt;&lt;br /&gt;
复合优先于继承&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;实现高质量equals方法的诀窍:&lt;/strong&gt;
1. 使用==操作符检查“参数是否为这个对象的引用”&lt;br /&gt;
2. 使用instanceof操作符检查“参数是否为正确的类型”&lt;br /&gt;
3. 把参数转换为正确的类型&lt;br /&gt;
4. 对于类中每个关键域，检查参数中的域是否与该对象中对应的域相匹配的。&lt;br /&gt;
5. 当你写完equals方法时，编写单元测试来验证对称性，传递性，一致性&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一些告诫：&lt;/strong&gt;&lt;br /&gt;
1. 覆盖equals时重要覆盖hashCode方法&lt;br /&gt;
2. 不要企图让equals过于智能&lt;br /&gt;
3. 不要将声明中的Object类型替换为其它类型&lt;/p&gt;

&lt;h3 id=&#34;第9条-覆盖equals时总要覆盖hashcode&#34;&gt;第9条：覆盖equals时总要覆盖hashCode&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;相等的对象必须有相等的散列码（hashCode）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为不同的对象产生不同的散列码&lt;/strong&gt;&lt;br /&gt;
1. 把某个非零的值，如17,保存在名为result的int型变量中。&lt;br /&gt;
2. 对于对象中每个关键域f（指equals中涉及的域），完成以下步骤：&lt;br /&gt;
 - a.为该域计算int类型的散列值c：&lt;br /&gt;
  + ⅰ.如果该域是boolean类型，则计算（f?1:0)。&lt;br /&gt;
  + ⅱ.如果该域是byte、char、short、或者int类型则计算（int）f。&lt;br /&gt;
  + ⅲ.如果该域是long类型，则计算（int）（f^(f&amp;gt;&amp;gt;&amp;gt;32)）。
  + ⅳ.如果该域是folat类型，则计算Float.floatToIntBits(f)。&lt;br /&gt;
  + ⅴ.如果该域是double类型，则计算Double.doubelToLongBits(f),然后按步骤2.a.ⅲ,
       为得到的long类型值计算散列值。
  + ⅵ.如果该域是一个对象引用，并且该类的对象的equals通过递归调用equals来比较这个域，
       则同样为这个域递归调用hashCode。如果需要更复杂的比较，则为这个域计算一个“范式”，
       然后针对这个范式调用hashCode。如果这个域的值为null，则返回0。&lt;br /&gt;
  + ⅶ.如果该域为一个数组，则要把每个元素当做单独的域来处理。也就是说，递归地应用以上规则，
       对每个重要的元素计算一个散列码，然后根据2.b中的做法把这些散列值组合起来。如果数组域中的每个元素都很重要，可以利用发行版本1.5中增加的其中一个Arrays.hashCode方法。&lt;br /&gt;
  - b.按照下面的公式把步骤2.a中计算的到的散列值c合并到result中：&lt;br /&gt;
     &lt;code&gt;result=32*result+c&lt;/code&gt;；&lt;br /&gt;
3. 返回result。&lt;br /&gt;
4. 写完了hashCode方法之后，问问自己“相等的实例是否都有相等的散列码”。要编写单元测试来验证你的判断。&lt;/p&gt;

&lt;h3 id=&#34;第10条-始终要覆盖tostring&#34;&gt;第10条：始终要覆盖toString&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;在实现toString时，必须做一个重要的决定：是否在文档中指定返回值得格式。无论你是否指定格式，都应该在文档中明确地表明你的意图。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;第11条-谨慎地覆盖clone&#34;&gt;第11条：谨慎地覆盖clone&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Cloneable接口的目的是作为一个对象的一个mixin接口。遗憾的是，它并没有成功地达到这个目的。其主要原因是它缺少一个clone方法,Object中的clone方法是受保护的。不能因为一个对象实现的Cloneable方法就可以调用clone方法，因为不能保证该对象一定具有可访问的clone方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;一下告诫：&lt;/strong&gt;&lt;br /&gt;
1. 如果构造器一样，clone方法不应该在构造的过程中，调用新对象中任何非final的方法（见17条）。&lt;br /&gt;
2. 所有实现了Cloneable都有应该用一个公有的clone方法覆盖clone方法，此方法首先调用super.clone，然后修正需要修正的域。&lt;br /&gt;
3. 另一个实现对象拷贝的好方法是提供一个拷贝构造器或者拷贝工厂。&lt;/p&gt;

&lt;h3 id=&#34;第12条-考虑实现comparable接口&#34;&gt;第12条：考虑实现Comparable接口&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;需要注意的地方：&lt;/strong&gt;
1. compareTo方法的约定于equals方法相似。
2. 为实现了Comparable接口的类添加组件是不要扩展这个类，而是要编写一个不相关的类，包含第一个类的实例，提供一个视图返回这个实例。
3. 有序集合使用compareTo方法而不是equals施加等同性测试。
4. 比较浮点域的时候要使用Float.compare或者Double.compare。整型相减时要注意可能的溢出。&lt;/p&gt;

&lt;h2 id=&#34;第4章-类和接口&#34;&gt;第4章：类和接口&lt;/h2&gt;

&lt;h3 id=&#34;第13条-使类和成员的可访问性最小&#34;&gt;第13条：使类和成员的可访问性最小&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一下告诫：&lt;/strong&gt;
1. 尽可能的使每个类或者成员不能被外部访问。注意实现了Serializable的接口的类可能会把私有域泄露出去。&lt;br /&gt;
2. 实例域决不能是公有的。&lt;br /&gt;
3. 长度非零的数组总是可变的，所以，类具有公有的静态final数组域，或者返回该域的访问方法，这几乎总是错误的。&lt;/p&gt;

&lt;h3 id=&#34;第14条-在公有类中使用访问方法而非公有域&#34;&gt;第14条：在公有类中使用访问方法而非公有域&lt;/h3&gt;

&lt;h3 id=&#34;第15条-使可变性最小化&#34;&gt;第15条：使可变性最小化&lt;/h3&gt;

&lt;p&gt;为了是类成为不可变类需要遵循以下5条规则：
1. 不要提供任何会改变对象状态的方法。&lt;br /&gt;
2. 保证该类不会被扩展。&lt;br /&gt;
3. 使所有的域都是final的。&lt;br /&gt;
4. 使所有的域都成为私有的。&lt;br /&gt;
5. 确保对于任何可变组件的互斥访问。如果该类有指向可变对象的域，则必须保证该类的客户端无法获得这些可变对象的引用。并且，永远不要用客户端提供的对象引用来初始化这样的域。在构造器、访问方法和readObject方法中要使用*保护性拷贝*的技术。&lt;/p&gt;

&lt;p&gt;为了提高性能，以上规则可以这样：没有一个方法能够对对象产生外部可见的改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不可变对象的优点&lt;/strong&gt;&lt;br /&gt;
1. 简单
2. 本质上是线程安全的
3. 易于共享&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不可变对象的缺点&lt;/strong&gt;&lt;br /&gt;
每个不同的值都需要单独的对象&lt;/p&gt;

&lt;h3 id=&#34;第16条-复合优先于继承&#34;&gt;第16条：复合优先于继承&lt;/h3&gt;

&lt;p&gt;继承打破了封装性，子类依赖与超类的具体实现细节。&lt;/p&gt;

&lt;p&gt;复合和转发&lt;br /&gt;
复合类 -&amp;gt; 包装类(wrapper)  -&amp;gt; 转发类(forwarding)&lt;br /&gt;
&lt;strong&gt;包装类不适合用于回调框架&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;继承的功能非常强大，但是也有诸多问题，继承破坏了封装性原则。只有当子类和超类的确存在子类型关系时，使用继承关系才是恰当的。&lt;/p&gt;

&lt;h3 id=&#34;第17条-要么为继承而设计-并提供文档说明-要么就禁止继承&#34;&gt;第17条：要么为继承而设计，并提供文档说明，要么就禁止继承&lt;/h3&gt;

&lt;p&gt;编写为继承而设计的类要注意的问题：&lt;br /&gt;
1. 该类必须有文档说明它可覆盖方法的自用性。&lt;br /&gt;
2. 唯一的测试方法就是编写子类&lt;br /&gt;
3. 构造器决不能调用可被覆盖的方法&lt;br /&gt;
4. 如果要实现Clone或者Serializable接口，要注意做一些限制&lt;/p&gt;

&lt;h3 id=&#34;第18条-接口优先于抽象类&#34;&gt;第18条：接口优先于抽象类&lt;/h3&gt;

&lt;p&gt;接口的优点：&lt;br /&gt;
1. 现有类可以很容易被更新，以实现接口&lt;br /&gt;
2. 接口是定义mixin（混合类型）的理性选择&lt;br /&gt;
3. 接口允许我们构造非层次结构的类型框架&lt;/p&gt;

&lt;p&gt;虽然接口不允许定义方法，但是通过对你导出的每一个重要接口提供一个骨架实现类（skeletal implementation），把接口和抽象类的优点结合起来。&lt;/p&gt;

&lt;h3 id=&#34;第19条-接口只用于定义类型&#34;&gt;第19条：接口只用于定义类型&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;常量接口是对接口的不良使用&lt;/strong&gt;&lt;br /&gt;
如果要导出常量，可以有几种合理的方案：&lt;br /&gt;
1. 如果这些常量与现有的某个接口或者类密切相关就应该把这些常量添加到这个接口或类中。&lt;br /&gt;
2. 如果这些常量最好被看作枚举类型的成员，就应该用枚举类型来导出这些常量，否则应该使用不可实例化的工具类来导出这些常量。&lt;/p&gt;

&lt;h3 id=&#34;第20条-类层次优先于标签类&#34;&gt;第20条：类层次优先于标签类&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;标签类过于冗长，容易出错，并且效率低下&lt;/strong&gt;&lt;br /&gt;
当你想要编写一个包含显示便签域的类时，应该考虑一下，这个标签类是否可以被取消，这个类是否可以用层次来替换。当你遇到一个包含便签域的类的时候就要考虑将它重构到一个层次结构中去。&lt;/p&gt;

&lt;h3 id=&#34;第21条-用函数对象表示策略&#34;&gt;第21条：用函数对象表示策略&lt;/h3&gt;

&lt;h3 id=&#34;第22条-优先考虑静态成员类&#34;&gt;第22条：优先考虑静态成员类&lt;/h3&gt;

&lt;p&gt;四种嵌套类：&lt;br /&gt;
1. 静态成员类&lt;br /&gt;
2. 非静态成员类（常用于定义Adapter，如Map的KeySet）&lt;br /&gt;
3. 匿名类&lt;br /&gt;
4. 局部类（用的最少）&lt;/p&gt;

&lt;p&gt;如果一个嵌套类需要在单个方法之外仍然是可见的，或者它太长了，不适合放在方法内部，就应该使用成员类。如果成员类的每一个实例都需要指向一个其外围类的引用，就要把成员类做成非静态的；否则，就做成静态的。假设这个嵌套类属于一个方法内部，如果你只需要在一个地方创建实例，并且有了一个预设了类型可以说明这个类的特征，就要把它做成匿名类；否则，就做成局部类。&lt;/p&gt;

&lt;h2 id=&#34;第5章-泛型&#34;&gt;第5章：泛型&lt;/h2&gt;

&lt;h3 id=&#34;第23条-请不要在新代码中使用原生类型&#34;&gt;第23条：请不要在新代码中使用原生类型&lt;/h3&gt;

&lt;p&gt;如果使用原生类型，就失去了泛型在安全性和表述性方面的考虑&lt;br /&gt;
？是无限制通配符，不能将任何元素（除null外）放到Collections&lt;code&gt;&amp;lt;?&amp;gt;&lt;/code&gt;中。&lt;br /&gt;
在类文字（class literal）中必须使用原生类型（Jackson 的TypeReference）&lt;/p&gt;

&lt;h3 id=&#34;第24条-消除非受检警告&#34;&gt;第24条：消除非受检警告&lt;/h3&gt;

&lt;p&gt;非受检警告很重要，不要忽略它们。每一条警告都表示可能在运行时引起ClassCastException异常。要尽最大努力消除这些警告。如果无法消除非受检警告，同时可以证明引起警告的代码是类型安全的，就可以在尽量小的范围内，用@SuppressWarnings(&amp;ldquo;unchecked&amp;rdquo;)注解来禁止该警告。要用注释把禁止该警告的原因记录下来。&lt;/p&gt;

&lt;h3 id=&#34;第25条-列表优先于数组&#34;&gt;第25条：列表优先于数组&lt;/h3&gt;

&lt;p&gt;列表和数组的不同：&lt;br /&gt;
1. 数组是协变的，泛型是不可变的。如果Sub是Super的子类型，Sub[]就是Super[]的子类型。List&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;不是List&lt;code&gt;&amp;lt;Super&amp;gt;&lt;/code&gt;的子类型。
2. 数组是具体化的。数组会在运行时在知道并检查它们的元素类型约束。相比之下，泛型是通过擦除来实现的。因此泛型只在编译时强化它们的类型信息，并在运行时丢弃（擦除）它们的元素类型信息。擦除就是使泛型可以与没有使用泛型的代码随意进行互用。&lt;/p&gt;

&lt;p&gt;创建泛型数组是非法的，因为它们不是类型安全的。泛型和数组不能很好的混合起来使用。&lt;/p&gt;

&lt;h3 id=&#34;第26条-优先使用泛型&#34;&gt;第26条：优先使用泛型&lt;/h3&gt;

&lt;h3 id=&#34;第27条-优先使用泛型方法&#34;&gt;第27条：优先使用泛型方法&lt;/h3&gt;

&lt;p&gt;类型推导&lt;/p&gt;

&lt;h3 id=&#34;第28条-利用有限制通配符来提高api的灵活性&#34;&gt;第28条：利用有限制通配符来提高API的灵活性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在API中使用通配符类型虽然比较需要技巧，但是使API变得更加灵活的多。如果编写的是将被广泛使用的类库，则一定要适当利用通配符类型。记住基本的规则：producer-extends，consumer-super（PECS）。还要记住所有的Comparable和comparator都是消费者。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;public static &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; T max (List&amp;lt;? extends T&amp;gt; list);

public static void swap(List&amp;lt;?&amp;gt; list,int i,int j){
    swapHelper(list,i,j);
}

private static void &amp;lt;T&amp;gt; swapHelper(List&amp;lt;T&amp;gt;,int i,int j){
    list.set(i.list.set(j,list.get(i)));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第29条-优先考虑类型安全的异构容器&#34;&gt;第29条：优先考虑类型安全的异构容器&lt;/h3&gt;

&lt;p&gt;集合API说明了泛型的一般用法限制你每个容器只能有固定数目的类型参数。你可以通过将类型参数放在键上而不是容器上来避开这一限制。对于这种类型安全的异构容器，可以使用Class对象作为键。以这种方式使用的Class对象被称为类型令牌。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Favorites{
    public &amp;lt;T&amp;gt; void putFavorite(Class&amp;lt;T&amp;gt; type,T instance);
    public &amp;lt;T&amp;gt; T getFavorite(Class &amp;lt;T&amp;gt; type);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第6章-枚举和注解&#34;&gt;第6章：枚举和注解&lt;/h2&gt;

&lt;h3 id=&#34;第30条-用enum代替int常量&#34;&gt;第30条：用enum代替int常量&lt;/h3&gt;

&lt;p&gt;与int常量相比，枚举类型的优势是不言而喻的。枚举类型要易读的多，也更加安全，功能更加强大。许多枚举都不需要显示的构造器或者成员，但许多其他枚举则受益于“每个常量是属性的关联”以及“提供行为受这个属性影响的方法”。只有极少数的枚举受益于将多种行为与单个方法关联。在这种相对少见的情况下，特定于常量的方法要优先于启用自有值的枚举。如果多个枚举常量同时共享相同的行为，则考虑策略枚举。
    public enum Operation{
        PLUS { double apple(double x,double y) {
            return x+y;
        }}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    abstract double apply(double x,double y) ;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第31条-用实例域代替序数&#34;&gt;第31条：用实例域代替序数&lt;/h3&gt;

&lt;p&gt;用于不要根据枚举的序数导出与它相关联的值，而是要用将它保存在一个实例域中。&lt;/p&gt;

&lt;h3 id=&#34;第32条-用enumset代替位域&#34;&gt;第32条：用EnumSet代替位域&lt;/h3&gt;

&lt;p&gt;用EnumSet代替位域是代码更加简洁、更加清楚、也更加安全。&lt;/p&gt;

&lt;h3 id=&#34;第33条-用enummap代替序数索引&#34;&gt;第33条：用EnumMap代替序数索引&lt;/h3&gt;

&lt;p&gt;最好不要用序数（ordnal）来索引数组，而要用EnumMap。如果你所表示的这种关系时多维的，就使用EnumMap&lt;code&gt;&amp;lt;...,EnumMap&amp;lt;...&amp;gt;&amp;gt;&lt;/code&gt;。应用程序的程序员在一般情况下都不使用Enum.ordinal，即使要用也很少，因此这是一种特殊情况。&lt;/p&gt;

&lt;h3 id=&#34;第34条-用接口模拟可伸缩的枚举&#34;&gt;第34条：用接口模拟可伸缩的枚举&lt;/h3&gt;

&lt;p&gt;虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对它进行模拟。这用允许客户端编写自己的枚举类型来实现接口。如果API是根据接口编写的，那么在使用基础类型的任何地方，也可以使用这些枚举。&lt;/p&gt;

&lt;h3 id=&#34;第35条-注解优先于命名模式&#34;&gt;第35条：注解优先于命名模式&lt;/h3&gt;

&lt;p&gt;命名模式的缺点：&lt;br /&gt;
1. 文字拼写错误会导致失败&lt;br /&gt;
2. 无法确保他们只用于相应的程序元素上&lt;br /&gt;
3. 他们没有提供参数值与程序元素关联起来的好方法&lt;/p&gt;

&lt;h3 id=&#34;第36条-坚持使用override注解&#34;&gt;第36条：坚持使用Override注解&lt;/h3&gt;

&lt;p&gt;Override注解可以确保你正确地覆盖了超类的方法，可以替你防止大量的错误。&lt;/p&gt;

&lt;h2 id=&#34;第7章-方法&#34;&gt;第7章：方法&lt;/h2&gt;

&lt;h3 id=&#34;第38条-检查参数的有效性&#34;&gt;第38条：检查参数的有效性&lt;/h3&gt;

&lt;p&gt;对于公有方法，应该在文档中清楚指明参数的限制，并且在方法体的开头处检查参数，以强制实施这些限制，要有Java的@throw标签在文档中说明违反参数限制时会抛出的异常。非公有方法通常使用断言来检查它们的参数。&lt;/p&gt;

&lt;h3 id=&#34;第39条-必要是进行保护性拷贝&#34;&gt;第39条：必要是进行保护性拷贝&lt;/h3&gt;

&lt;p&gt;如果类具有从客户端得到或者返回到客户端的可变组件，类就必须保护性地拷贝这些组件。如果拷贝的成本受到限制，并且信任它的客户端不会不恰当地修改组件，就在文档中说明客户端的职责是不得修改受到影响的组件，以此来代替保护性拷贝。&lt;/p&gt;

&lt;h3 id=&#34;第40条-谨慎设计方法签名&#34;&gt;第40条：谨慎设计方法签名&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;谨慎地选择方法名称&lt;/li&gt;
&lt;li&gt;不要过于追求便利的方法&lt;/li&gt;
&lt;li&gt;避免过长的参数列表（使用分解方法、辅助类或Builder改善过长参数列表）&lt;/li&gt;
&lt;li&gt;对于参数类型要优先使用接口而不是类&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;第41条-慎用重载&#34;&gt;第41条：慎用重载&lt;/h3&gt;

&lt;p&gt;“能够重载方法”并不意味着就“应该重载方法”。一般情况下，对于多个具有相同参数数目的方法来说，应该尽量避免重载方法。在某些情况下，特别是在涉及构造器的时候要遵循这条建议也许是不可能的。在这种情况下，至少应该避免这样的情形：同一组参数只需要经过类型转换就可以被传递给不同的重载方法。如果不能避免这种情形，例如，因为正在改造一个现有的类以实现新的接口，就应该保证：当传递同样的参数时，所有重载的方法的行为必须一致。如果不能做到这一点，程序员就很难有效地使用被重载的方法或者构造器，他们就不能理解它为什么不能正常地工作。&lt;/p&gt;

&lt;h3 id=&#34;第42条-慎用可变参数&#34;&gt;第42条：慎用可变参数&lt;/h3&gt;

&lt;h3 id=&#34;第43条-返回零长度的数组或集合而不是null&#34;&gt;第43条：返回零长度的数组或集合而不是null&lt;/h3&gt;

&lt;h3 id=&#34;第44条-为所有导出的api元素编写文档注释&#34;&gt;第44条：为所有导出的API元素编写文档注释&lt;/h3&gt;

&lt;h2 id=&#34;第8章-通用程序设计&#34;&gt;第8章：通用程序设计&lt;/h2&gt;

&lt;h3 id=&#34;第45条-将局部变量作用域最小化&#34;&gt;第45条：将局部变量作用域最小化&lt;/h3&gt;

&lt;p&gt;for循环优先于while循环&lt;/p&gt;

&lt;h3 id=&#34;第46条-for-each循环优先于传统的for循环&#34;&gt;第46条：for-each循环优先于传统的for循环&lt;/h3&gt;

&lt;p&gt;for-each循环在简洁性和预防bug方面有着传统for循环无法比拟的优势，而且没有性能损失。&lt;/p&gt;

&lt;h3 id=&#34;第47条-了解和使用类库&#34;&gt;第47条：了解和使用类库&lt;/h3&gt;

&lt;h3 id=&#34;第48条-如果需要精确的答案-请避免使用float和double&#34;&gt;第48条：如果需要精确的答案，请避免使用float和double&lt;/h3&gt;

&lt;p&gt;对任何需要精确答案的计算任务，不要使用float或double，而要使用BigDecimal。&lt;/p&gt;

&lt;h3 id=&#34;第49条-基本类型优先于装箱基本类型&#34;&gt;第49条：基本类型优先于装箱基本类型&lt;/h3&gt;

&lt;p&gt;使用装箱基本类型是要特别小心。自动装箱减少了使用装箱基本类型的繁琐性，但是并没有减少它的风险。&lt;/p&gt;

&lt;h3 id=&#34;第50条-如果其它类型更适合-尽量避免使用字符串&#34;&gt;第50条：如果其它类型更适合，尽量避免使用字符串。&lt;/h3&gt;

&lt;p&gt;如果可以使用更加合适的数据类型，或者可以编写更加适当的数据类型，就应该避免使用字符串来表示对象。若使用不当，字符串会比其它类型更加笨拙，更加不灵活，速度更慢，也更容易出错。&lt;/p&gt;

&lt;h3 id=&#34;第51条-当心字符串的连接性能&#34;&gt;第51条：当心字符串的连接性能&lt;/h3&gt;

&lt;p&gt;不要使用字符串来连接多个字符串，除非性能无关紧要。相反，应该使用StringBuilder的append方法。&lt;/p&gt;

&lt;h3 id=&#34;第52条-通过接口引用对象&#34;&gt;第52条：通过接口引用对象&lt;/h3&gt;

&lt;h3 id=&#34;第53条-接口优先于反射机制&#34;&gt;第53条：接口优先于反射机制&lt;/h3&gt;

&lt;p&gt;反射机制的缺点：&lt;br /&gt;
1. 丧失了编译时类型检查的好处。
2. 执行反射访问所需要的代码非常笨拙和冗长。
3. 性能损失。&lt;/p&gt;

&lt;p&gt;如果有可能就应该仅仅使用反射机制来实例化对象，而访问对象时则使用摸个编译时已知的接口或者超类。&lt;/p&gt;

&lt;h3 id=&#34;第54条-谨慎地使用本地方法&#34;&gt;第54条：谨慎地使用本地方法&lt;/h3&gt;

&lt;p&gt;使用本地方法来提高性能的做法不值得提倡&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;不要费力去编写快速的程序————应该努力编写好的程序，速度自然会随之而来。在设计系统的时候，特别是在设计API、线路层协议和永久数据格式的时候，一定要考虑性能因素。当构建完系统之后，测试它的性能。如果它足够快，你的任务就完成了。如果不够快，则可以在性能剖析器的帮助下，找到问题的根源，然后设法优化系统中相关的部分。第一个步骤就是检查所选择的算法；再多的底层优化也无法弥补算法的选择不当。必要时重复这个过程，在每次改变之后都要测量性能，直到满意为止。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;第56条-遵守普遍接受的命名习惯&#34;&gt;第56条：遵守普遍接受的命名习惯&lt;/h3&gt;

&lt;h2 id=&#34;第9章-异常&#34;&gt;第9章：异常&lt;/h2&gt;

&lt;h3 id=&#34;第57条-只针对异常的情况才使用异常&#34;&gt;第57条：只针对异常的情况才使用异常&lt;/h3&gt;

&lt;h3 id=&#34;第58条-对可恢复的情况使用受检异常-对编程错误使用运行时异常&#34;&gt;第58条：对可恢复的情况使用受检异常，对编程错误使用运行时异常&lt;/h3&gt;

&lt;h3 id=&#34;第59条-避免不必要的使用受检异常&#34;&gt;第59条：避免不必要的使用受检异常&lt;/h3&gt;

&lt;h3 id=&#34;第60条-优先使用标准异常&#34;&gt;第60条：优先使用标准异常&lt;/h3&gt;

&lt;p&gt;IllegalArgumentException&lt;br /&gt;
IllegalStateException&lt;br /&gt;
NullPointorException&lt;br /&gt;
IndexOutOfBoundsException&lt;br /&gt;
ConcurrentModifficationException&lt;br /&gt;
UnspportedOperationException&lt;/p&gt;

&lt;h3 id=&#34;第61条-抛出与抽象相应的异常&#34;&gt;第61条：抛出与抽象相应的异常&lt;/h3&gt;

&lt;p&gt;如果不能阻止或者处理来自更底层的异常，一般的做法是使用异常转译，除非底层方法碰巧尅保证它抛出的所以异常对高层也合适才可以将底层异常传播到高层。异常链对高层和底层都提供了最佳的功能：它允许抛出适当的高层异常，同时又能捕获底层的原因进行失败分析。&lt;/p&gt;

&lt;h3 id=&#34;第62条-每个方法抛出的异常都要有文档&#34;&gt;第62条：每个方法抛出的异常都要有文档&lt;/h3&gt;

&lt;p&gt;要为你编写的每个方法所能抛出的异常建立文档。对于未受检和受检的异常，以及对于抽象的和具体的方法都一样。要为每个受检异常提供单独的throws子句，不要为受检的异常提供throws子句。&lt;/p&gt;

&lt;h3 id=&#34;第63条-在细节信息中包含能捕获失败的信息&#34;&gt;第63条：在细节信息中包含能捕获失败的信息&lt;/h3&gt;

&lt;p&gt;为了捕获失败，异常的细节信息应该包含所有“对异常有贡献”的参数和域的值。&lt;/p&gt;

&lt;h3 id=&#34;第64条-努力使失败保持原子性&#34;&gt;第64条：努力使失败保持原子性&lt;/h3&gt;

&lt;p&gt;任何异常都应该让对象保持在该方法调用之前的状态。如果违反了这条规则，API文档就应该指明对象处于什么样的状态。&lt;/p&gt;

&lt;h3 id=&#34;第65条-不要忽略异常&#34;&gt;第65条：不要忽略异常&lt;/h3&gt;

&lt;h2 id=&#34;第10章-并发&#34;&gt;第10章：并发&lt;/h2&gt;

&lt;h3 id=&#34;第66条-同步访问共享的可变数据&#34;&gt;第66条：同步访问共享的可变数据&lt;/h3&gt;

&lt;p&gt;Java语言规范保证读或者写一个变量是原子的（atomic），除非这个变量的类型为long或者double。换句话说，独缺一个非long或者double类型的变量，可以保证值是某个线程保存在该变量中的，几时多个线程在没有同步的情况下并发第修改这个变量也是如此。&lt;/p&gt;

&lt;p&gt;虽然语言规范保证了线程在读取原子数据的时候，不会看到任意的数据，但是它并不保证一个线程写入的值对应于另一个线程将是可见的。&lt;strong&gt;为了在线程之间进行可靠的通信，也为了互斥访问，同步是必要的。&lt;/strong&gt;这归因与Java中的语言规范中的内存模型，它规定了一个线程所做的变化何时以及如何变成对其它线程可见。&lt;/p&gt;

&lt;p&gt;如果读写操作都没有同步，同步就不会起作用。&lt;br /&gt;
增量操作符（++）不是原子性的。&lt;/p&gt;

&lt;p&gt;当多个线程共享可变数据时，每个读或写数据的线程都必须执行同步。如果没有同步，就无法保证一个线程的修改可以被另一个线程获知。未能同步共享可变数据会造成程序的活性失败和安全性失败。这样的失败是难以调试的。他们可能是间歇性的，且与时间相关，程序的行为在不同的VM上可能根本不同。如果只需要在线程之间的交互通讯，而不是互斥访问，volatile修饰符就是一种可以接受的同步形式，但是要正确使用它要一些技巧。&lt;/p&gt;

&lt;h3 id=&#34;第67条-避免过度同步&#34;&gt;第67条：避免过度同步&lt;/h3&gt;

&lt;p&gt;为了避免死锁和数据破坏，千万不要从同步区域调用外来方法。更为一般的讲，要尽量限制他不区域内部的工作量。当你在设计一个可变类时，要考虑他们是否应该自己完成同步操作。在现在这个多核的时代，这笔永远不要过度同步来得重要。只有你有足够的理由一定要在内部同步类的时候，才应该这样做，同时还应该将这个决定清楚地写在文档中。&lt;/p&gt;

&lt;h3 id=&#34;第68条-executor和task优先于线程&#34;&gt;第68条：executor和task优先于线程&lt;/h3&gt;

&lt;h3 id=&#34;第69条-并发工具优先于wait和notify&#34;&gt;第69条：并发工具优先于wait和notify&lt;/h3&gt;

&lt;p&gt;直接使用Wait和notify就像是“并发汇编语言”进行编程一样，而java.util.concurrent则提供了更高级的语言。没有理由在新的代码中使用wait和notify。即使有也是极少的。如果你在维护使用notify和wait的代码，务必确保始终利用标准的模式从while循环内部调用wait。一般情况下，你应该优先使用notifyAll，而不是notify。如果使用notify，请一定要小心，以确保程序的活性。&lt;/p&gt;

&lt;h3 id=&#34;第70条-线程安全性文档化&#34;&gt;第70条：线程安全性文档化&lt;/h3&gt;

&lt;p&gt;一个类为了可被多个线程使用，必须在文档中清楚地说明它所支持的线程安全级别。&lt;br /&gt;
1. 不可变
2. 无条件线程安全（Random，ConcurrentHashMap）
3. 有条件线程安全（Collections.synchronized包装返回的集合，它们的迭代器要求外部同步。
4. 非线程安全
5. 线程对立的（线程对立的根源通常在于，没有同步第修改静态数据）&lt;/p&gt;

&lt;h3 id=&#34;第71条-慎用延迟初始化&#34;&gt;第71条：慎用延迟初始化&lt;/h3&gt;

&lt;p&gt;大多数的域应该正常的初始化，而不是延迟初始化。如果为了达到性能目标，或者为了破坏有害的初始化循环，而必须延迟初始化一个域，就可以使用相应的延迟初始化方法。对于实例域，就使用双重检查模式；对于静态域就使用lazy initialization class idiom。对于可重复初始化的实例域，也可以考虑使用单重检查模式。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private static class FieldHolder{
    static final FieldType field = computeFieldValue();
}

static FieldType getField(){return FieldHolder.field;}


private volatile FieldType field;
FieldType getField(){
    FieldType result=field;
    if(result==null){
        synchronized(this){
            result=field;
            if(result==null){
                field=result=computeFieldValue();
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;第72条-不要依赖于线程调度器&#34;&gt;第72条：不要依赖于线程调度器&lt;/h3&gt;

&lt;p&gt;不要让程序的正确性依赖与线程调度器。否则，结果得到的应用程序及不健壮，也不具可移植性。&lt;/p&gt;

&lt;h3 id=&#34;第73条-避免使用线程组&#34;&gt;第73条：避免使用线程组&lt;/h3&gt;

&lt;h2 id=&#34;第11章-序列化&#34;&gt;第11章：序列化&lt;/h2&gt;

&lt;h3 id=&#34;第74条-谨慎地实现serializable接口&#34;&gt;第74条：谨慎地实现Serializable接口&lt;/h3&gt;

&lt;p&gt;实现Serializable而付出的最大代价就是，一旦一个类被发布，就大大降低了“改变这个类的实现”的灵活性。&lt;br /&gt;
实现Serializable的第二个代价是，它增加了出现bug和安全漏洞的可能性。&lt;br /&gt;
实现Serializable的第三个代价是，随着类发行新的版本，相关的测试负担也增加了。&lt;/p&gt;

&lt;p&gt;千万不要以为实现Serializable接口会很容易。除非一个类在用了一段时间之后就会被抛弃，否则，实现Serializable接口就是一个很严肃的承诺，必须认真对待。如果一个类是为了继承而设计的，则更加需要加倍小心。对于这样的类而言，在“允许子类实现Serializable接口”或“禁止子类实现Serializable接口”之间的一个折中的方案是提供一个可访问的无参构造器。这种方案允许子类实现Serializable接口。&lt;/p&gt;

&lt;h3 id=&#34;第75条-考虑使用自定义的序列化形式&#34;&gt;第75条：考虑使用自定义的序列化形式&lt;/h3&gt;

&lt;p&gt;如果一个对象的物理表示法等同于它的逻辑内容，可能就适合使用默认的序列化形式。&lt;br /&gt;
当一个对象的物理表示法与它的逻辑数据内容有实质性的区别时，使用默认序列化形式会有以下4个缺点：&lt;br /&gt;
1. 它是这个类的导出API永远束缚在该类的内部表示法上。&lt;br /&gt;
2. 它会消耗过多的空间。
3. 它会消耗过多的时间。
4. 它会引起栈溢出。&lt;/p&gt;

&lt;p&gt;不管你选择使用那种序列化形式，都要为自己编写的每个可序列化的类声明一个显式的序列版本UID。&lt;/p&gt;

&lt;h3 id=&#34;第76条-保护性地编写readobject方法&#34;&gt;第76条：保护性地编写readObject方法&lt;/h3&gt;

&lt;p&gt;ReadObject实际上相当于另一个公有的构造器。&lt;/p&gt;

&lt;h3 id=&#34;第77条-对于实例控制-枚举类型优先于readresolve&#34;&gt;第77条：对于实例控制，枚举类型优先于readResolve&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;第78条-考虑用序列化代理替代序列化实例&#34;&gt;第78条：考虑用序列化代理替代序列化实例&lt;/h3&gt;

&lt;p&gt;TODO&lt;/p&gt;

&lt;h3 id=&#34;end&#34;&gt;End&lt;/h3&gt;
</description>
      
    </item>
    
    <item>
      <title>Docker入门实践小结</title>
      <link>https://blog.kk17.net/post/docker-in-practice/</link>
      <pubDate>Sun, 08 Mar 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/docker-in-practice/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;是近来大热的技术，似乎没有用过Docker都要落伍了，于是我也在一个个人的项目中用上了Docker，也算有了一些实践经验，与大家分享交流一下。&lt;/p&gt;

&lt;p&gt;首先是安装和配置本地的Docker环境，因为Docker是Linux容器引擎，所以宿主机必须是Linux，Windows和Mac系统使用Docker必须先安装Boot2Docker运行一个包含Docker依赖的最小化Linux虚拟机作为宿主机，当然也可以用虚拟机运行一个完整Linux桌面系统然后再在里面安装Docker，个人更推荐后面一种方法。&lt;/p&gt;

&lt;p&gt;国内连Docker Hub Pull镜像速度比较慢，推荐使用注册免费使用&lt;a href=&#34;http://www.daocloud.io&#34;&gt;DaoCloud&lt;/a&gt;的个人加速链接，注册后还可以有Boot2Docker的加速下载链接。
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;如果你想在服务器上运行Docker但是自己没有服务器，推荐使用DigitalOcean的旧金山的VPS，&lt;a href=&#34;http://www.zhujiceping.com/3469.html&#34;&gt;注册教程&lt;/a&gt;, 欢迎使用我的&lt;a href=&#34;http://www.digitalocean.com/?refcode=40d439332dc3&#34;&gt;推广链接&lt;/a&gt;注册，注册后你可以获得10美元，相当于可以免费使用最小容量的Droplet两个月，如果你消费了25美元，我也可以获得25美元。&lt;/p&gt;

&lt;p&gt;有了环境，如果你想系统学习Docker，可以参考下面的书和系列文章。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/26285268/&#34;&gt;第一本Docker书 (豆瓣)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.douban.com/subject/26284823/&#34;&gt;Docker 技术入门与实战 (豆瓣)&lt;/a&gt; &lt;a href=&#34;http://dockerpool.com/static/books/docker_practice/index.html&#34;&gt;在线阅读&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/docker-core-technology-preview&#34;&gt;深入浅出Docker系列&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用Docker时尽量使用Dockerfile构建镜像，为Dockerfile创建一个GitHub Repository，然后使用&lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;关联到这个GitHub Repository，就可以自动构建镜像了，每次有提交都会触发自动构建。大的Dockerfile修改提交到Github前最好本地演练一下，避免自动构建失败。国内网络本地运行Docker镜像安装依赖程序比较慢，可以使用国内的镜像软件源，例如如果是ubuntu可以运行下面命令。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed &#39;s/archive\.ubuntu\.com/mirrors\.zju\.edu\.cn/&#39; -i /etc/apt/sources.list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dockerfile的一些细节可以参考官方的Dockerfile，例如&lt;a href=&#34;https://github.com/docker-library/redis/blob/062335e0a8d20cab2041f25dfff2fbaf58544471/2.8/Dockerfile&#34;&gt;redis Dockerfile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;尽量一个容器（镜像）只负责运行一个应用程序，多个容器可以使用&lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt;进行简单编配。例如本人的&lt;a href=&#34;https://github.com/kk17/CoolCantonese&#34;&gt;CoolCantonese&lt;/a&gt;项目，使用3个容器分别运行python、redis和nginx。&lt;/p&gt;

&lt;p&gt;fig.xml:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wechat:
  image: kk17/coolcantonese
  entrypoint: python
  command: wechat.py
  ports:
    - &amp;quot;80:8888&amp;quot;
  volumes:
    - .:/Cantonese
    - /Cantonese_audio
  links:
    - redis

redis:
  image: redis

nginx:
  image: nginx
  volumes_from:
    - wechat
  volumes:
    - configs/nginx.conf:/etc/nginx/nginx.conf:ro
  ports:
    - &amp;quot;9090:9090&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上就是本人对Docker的一些基础实践，欢迎多交流。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>java内存模型和垃圾回收学习笔记</title>
      <link>https://blog.kk17.net/post/jvm-memory-model-and-gc/</link>
      <pubDate>Sun, 01 Feb 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/jvm-memory-model-and-gc/</guid>
      
        <description>

&lt;h2 id=&#34;java-jvm-内存模型&#34;&gt;Java（JVM）内存模型&lt;/h2&gt;

&lt;p&gt;Java内存模型建立在自动内存管理的概念之上。当一个对象不再被一个应用所引用，垃圾回收器就会回收它，从而释放相应的内存。这一点和其他很多需要自行释放内存的语言有很大不同。&lt;/p&gt;

&lt;p&gt;JVM从底层操作系统中分配内存，并将它们分为以下几个区域：
&lt;img src=&#34;http://www.pointsoftware.ch/wp-content/uploads/2012/11/Cookbook_JVMArguments_2_MemoryModel.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&#34;http://www.pointsoftware.ch/wp-content/uploads/2012/10/JUtH_20121024_RuntimeDataAreas_2_MemoryModel.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;堆空间（Heap Space）：这是共享的内存区域，用于存储可以被垃圾回收器回收的对象。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;方法区（Method Area）：这块区域以前被称作“永生代”（permanent generation），用于存储被加载的类。这块区域最近被JVM取消了。现在，被加载的类作为元数据加载到底层操作系统的本地内存区。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;本地区（Native Area）：这个区域用于存储基本类型的引用和变量。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;堆空间与永久代&#34;&gt;堆空间与永久代：&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://colobu.com/2014/12/16/java-jvm-memory-model-and-garbage-collection-monitoring-tuning/Java-Memory-Model.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;永久代-permanent-generation&#34;&gt;永久代（Permanent Generation）&lt;/h3&gt;

&lt;p&gt;永久代或者“Perm Gen”包含了JVM需要的应用元数据，这些元数据描述了在应用里使用的类和方法。注意，永久代不是Java堆内存的一部分。
永久代存放JVM运行时使用的类。永久代同样包含了Java SE库的类和方法。永久代的对象在full GC时进行垃圾收集。&lt;/p&gt;

&lt;h3 id=&#34;堆空间&#34;&gt;堆空间&lt;/h3&gt;

&lt;p&gt;Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。
在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。
这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。&lt;/p&gt;

&lt;h2 id=&#34;java垃圾回收&#34;&gt;Java垃圾回收&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;所有的垃圾收集都是“Stop the World”事件，因为所有的应用线程都会停下来直到操作完成（所以叫“Stop the World”）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为年轻代里的对象都是一些声明周期很短的（short-lived ）对象，执行Minor GC非常快，所以应用不会受到程序暂停的影响。&lt;/p&gt;

&lt;p&gt;由于Major GC会检查所有存活的对象，因此会花费更长的时间。应该尽量减少Major GC。因为Major GC会在垃圾回收期间让你的应用反应迟钝，所以如果你有一个需要快速响应的应用， 在频繁发生Major GC时，你会看到超时错误。&lt;/p&gt;

&lt;p&gt;垃圾回收时间取决于垃圾回收策略。这就是为什么有必要去监控垃圾收集和对垃圾收集进行调优。从而避免要求快速响应的应用出现超时错误。&lt;/p&gt;

&lt;p&gt;图解垃圾回收过程：
&lt;img src=&#34;https://plumbr.eu/wp-content/uploads/2015/02/minor-gc-major-gc-full-gc.jpg&#34; alt=&#34;图解垃圾回收过程&#34; /&gt;&lt;/p&gt;

&lt;p&gt;回收算法与Stop the World：
&lt;img src=&#34;http://apmblog.dynatrace.com/wp-content/600x263xGC-Compare-600x263.png.pagespeed.ic.3rAxdnMHEa.png&#34; alt=&#34;回收算法与Stop the World&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可用的垃圾回收算法选项：
&lt;img src=&#34;http://www.jdon.com/idea/images/jvm.png&#34; alt=&#34;可用的垃圾回收算法选项&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;java垃圾收集监控&#34;&gt;Java垃圾收集监控&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;jstat
可以使用jstat命令行工具监控JVM内存和垃圾回收。标准的JDK已经附带了jstat，所以不需要做任何额外的事情就可以得到它&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Java VisualVM及Visual GC插件
如果你想在GUI里查看内存和GC，那么可以使用jvisualvm工具。Java VisualVM同样是JDK的一部分，所以你不需要单独去下载。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;相关文章&#34;&gt;相关文章&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.importnew.com/13556.html&#34;&gt;JVM必备指南 - ImportNew&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.jdon.com/idea/jvm.html&#34;&gt;JVM内存模型和性能优化 - 解道Jdon&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://colobu.com/2014/12/16/java-jvm-memory-model-and-garbage-collection-monitoring-tuning/&#34;&gt;Java内存与垃圾回收调优 | 鸟窝&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://plumbr.eu/blog/garbage-collection/minor-gc-vs-major-gc-vs-full-gc&#34;&gt;Minor GC vs Major GC vs Full GC – Plumbr&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://apmblog.dynatrace.com/2011/03/10/major-gcs-separating-myth-from-reality/&#34;&gt;Major GCs - Separating Myth from Reality - Dynatrace APM Blog&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.pointsoftware.ch/de/under-the-hood-runtime-data-areas-javas-memory-model/&#34;&gt;Point Software AG&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Sublime Text技巧</title>
      <link>https://blog.kk17.net/post/sublime-text/</link>
      <pubDate>Mon, 26 Jan 2015 09:00:00 +0800</pubDate>
      
      <guid>https://blog.kk17.net/post/sublime-text/</guid>
      
        <description>

&lt;p&gt;本文记录一些Sublime Text的技巧和资源链接。&lt;/p&gt;

&lt;h1 id=&#34;快捷键&#34;&gt;快捷键：&lt;/h1&gt;

&lt;h2 id=&#34;goto-anything&#34;&gt;Goto Anything：&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;用 Command+P 可以快速跳转到当前项目中的任意文件，可进行关键词匹配。&lt;/li&gt;
&lt;li&gt;用 Command+P 后 @ (或是Command+R)可以快速列出/跳转到某个函数（很爽的是在 markdown 当中是匹配到标题，而且还是带缩进的！）。&lt;/li&gt;
&lt;li&gt;用 Command+P 后 # 可以在当前文件中进行搜索。&lt;/li&gt;
&lt;li&gt;用 Command+P 后 : (或是Ctrl+G)加上数字可以跳转到相应的行。&lt;/li&gt;
&lt;li&gt;而更酷的是你可以用 Command+P 加上一些关键词跳转到某个文件同时加上 @ 来列出/跳转到目标文件中的某个函数，或是同时加上 # 来在目标文件中进行搜索，或是同时加上 : 和数字来跳转到目标文件中相应的行。&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cmd+p&lt;/td&gt;
&lt;td&gt;Ctrl+p&lt;/td&gt;
&lt;td&gt;Goto Anything&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cmd+r&lt;/td&gt;
&lt;td&gt;Ctrl+r&lt;/td&gt;
&lt;td&gt;快速列出/跳转到某个函数&lt;/td&gt;
&lt;td&gt;相当于Cmd+p+@&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl+g&lt;/td&gt;
&lt;td&gt;Ctrl+g&lt;/td&gt;
&lt;td&gt;跳转到相应的行&lt;/td&gt;
&lt;td&gt;当于Cmd+p+:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;行编辑&#34;&gt;行编辑：&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shit+Up/Down&lt;/td&gt;
&lt;td&gt;Ctrl+Alt+Up/Down&lt;/td&gt;
&lt;td&gt;光标上下选择多行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl+Shit+Left/Right&lt;/td&gt;
&lt;td&gt;Ctrl+Shit+Left/Right&lt;/td&gt;
&lt;td&gt;光标左右选择多列文字&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl+Left/Right&lt;/td&gt;
&lt;td&gt;Ctrl+Left/Right&lt;/td&gt;
&lt;td&gt;光标左右跳转&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl+j&lt;/td&gt;
&lt;td&gt;Ctrl+j&lt;/td&gt;
&lt;td&gt;合并选择的多行文本到一行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;多重选择&#34;&gt;多重选择：&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cmd+d&lt;/td&gt;
&lt;td&gt;Ctrl+d&lt;/td&gt;
&lt;td&gt;选中下一个同样文本内容&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl+Cmd+g&lt;/td&gt;
&lt;td&gt;Alt+F3&lt;/td&gt;
&lt;td&gt;选中所有同样文本内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;行操作&#34;&gt;行操作：&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cmd+Shit+d&lt;/td&gt;
&lt;td&gt;Ctrl+p&lt;/td&gt;
&lt;td&gt;重复行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Cmd+x&lt;/td&gt;
&lt;td&gt;Ctrl+x&lt;/td&gt;
&lt;td&gt;删除行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Ctrl+Cmd+Up/Down&lt;/td&gt;
&lt;td&gt;Ctrl+Shit+Up/Down&lt;/td&gt;
&lt;td&gt;上下移动当前行/选中多行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;多文件窗口&#34;&gt;多文件窗口&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cmd+alt+n&lt;/td&gt;
&lt;td&gt;Ctrl+alt+n&lt;/td&gt;
&lt;td&gt;使用n个文件窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;查找替换&#34;&gt;查找替换&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;th&gt;Windows&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cmd+f&lt;/td&gt;
&lt;td&gt;Ctrl+f&lt;/td&gt;
&lt;td&gt;Find&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;F3&lt;/td&gt;
&lt;td&gt;Find Next&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ctrl+i&lt;/td&gt;
&lt;td&gt;Incremental Find&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ctrl+e&lt;/td&gt;
&lt;td&gt;Use Selection to Find&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;Find In Files&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Ctrl+h&lt;/td&gt;
&lt;td&gt;Replace&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;自定义快捷键&#34;&gt;自定义快捷键&lt;/h2&gt;

&lt;p&gt;修改Key Bindings - User:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;[
    {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ctrl+alt+f&amp;quot;&lt;/span&gt;], &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;show_panel&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;: {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;panel&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;find_in_files&amp;quot;&lt;/span&gt;} },
    {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ctrl+shift+f&amp;quot;&lt;/span&gt;], &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;reindent&amp;quot;&lt;/span&gt;},
    {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;ctrl+shift+r&amp;quot;&lt;/span&gt;], &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;reveal_in_side_bar&amp;quot;&lt;/span&gt;}
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;打开command日志可以查到操作的command命令和参数用于绑定快捷键&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span&gt;&lt;/span&gt;sublime&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;log_commands(&lt;span style=&#34;color: #008000&#34;&gt;True&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;snippet&#34;&gt;Snippet：&lt;/h1&gt;

&lt;p&gt;添加xxx.sublime-snippet文件到User/Packages目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;snippet&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;content&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #BC7A00&#34;&gt;&amp;lt;![CDATA[&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;title: &amp;quot;${1:title}&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;description: &amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;category: ${2:category}&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;tags: [${3:tags}]&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;---&lt;/span&gt;
&lt;span style=&#34;color: #BC7A00&#34;&gt;]]&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/content&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;&amp;lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;tabTrigger&amp;gt;&lt;/span&gt;post&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/tabTrigger&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #408080; font-style: italic&#34;&gt;&amp;lt;!-- Optional: Set a scope to limit where the snippet will trigger --&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;text.html.markdown&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;markdown blog post setting&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;lt;/snippet&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;build-system&#34;&gt;Build System&lt;/h1&gt;

&lt;p&gt;添加xxx.sublime-build文件到User/Packages目录&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;cmd&amp;quot;&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;jython.bat&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;-u&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;$file&amp;quot;&lt;/span&gt;],
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;file_regex&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;^[ ]*File \&amp;quot;(...*?)\&amp;quot;, line ([0-9]*)&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;selector&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;source.python&amp;quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;命令行工具&#34;&gt;命令行工具：&lt;/h1&gt;

&lt;p&gt;Windows:
添加安装目录到PATH环境变量&lt;/p&gt;

&lt;p&gt;Mac:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s &amp;quot;/Applications/Sublime Text 3.app/Contents/SharedSupport/bin/subl&amp;quot; ~/bin/subl
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;插件&#34;&gt;插件：&lt;/h1&gt;

&lt;p&gt;安装&lt;a href=&#34;https://packagecontrol.io/&#34;&gt;Package Control&lt;/a&gt;用户管理插件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import urllib.request,os,hashlib; h = &#39;2deb499853c4371624f5a07e27c334aa&#39; + &#39;bf8c4e67d14fb0525ba4f89698a6d7e1&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;一些常用插件和配置&#34;&gt;一些常用插件和配置&lt;/h2&gt;

&lt;h3 id=&#34;markdown-editing&#34;&gt;Markdown Editing：&lt;/h3&gt;

&lt;p&gt;Markdown GFM Settings - User:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;extensions&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;md&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;mdown&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;markdown&amp;quot;&lt;/span&gt;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;markdown-preview&#34;&gt;Markdown Preview:&lt;/h3&gt;

&lt;p&gt;Settings - User:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;parser&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;github&amp;quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Key Bindings - User:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;{ &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt;: [&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;alt+m&amp;quot;&lt;/span&gt;], &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;command&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;markdown_preview&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;args&amp;quot;&lt;/span&gt;: {&lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;browser&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #008000; font-weight: bold&#34;&gt;&amp;quot;parser&amp;quot;&lt;/span&gt;:&lt;span style=&#34;color: #BA2121&#34;&gt;&amp;quot;default&amp;quot;&lt;/span&gt;} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;lint-扩展&#34;&gt;Lint 扩展&lt;/h3&gt;

&lt;p&gt;SublimeLinter 试过多个同类扩展之后发现它最好用，并且支持多种语言、不需要热键——它在输入时就自动校验。&lt;/p&gt;

&lt;h3 id=&#34;更多插件&#34;&gt;更多插件：&lt;/h3&gt;

&lt;p&gt;Side​Bar​Enhancements,Terminal,GitGutter,Table Editor,Emmet,AllAutocomplete,IMESuport&lt;/p&gt;

&lt;h3 id=&#34;编写插件&#34;&gt;编写插件&lt;/h3&gt;

&lt;p&gt;宏无法达到要求时，定义一个扩展：
&lt;a href=&#34;http://net.tutsplus.com/tutorials/python-tutorials/how-to-create-a-sublime-text-2-plugin/&#34;&gt;How to Create a Sublime Text 2 Plugin&lt;/a&gt;
&lt;a href=&#34;http://www.sublimetext.com/docs/plugin-examples&#34;&gt;Sublime Text plugin-examples&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;宏编辑&#34;&gt;宏编辑&lt;/h1&gt;

&lt;p&gt;需要批量热键操作的话，可以定义宏：
&lt;a href=&#34;http://readthedocs.org/docs/sublime-text-unofficial-documentation/en/latest/extensibility/macros.html&#34;&gt;Macros — Sublime Text Unofficial Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;project&#34;&gt;Project&lt;/h1&gt;

&lt;p&gt;配置prj-name.sublime-project，主要是单独设定一致的缩进格式和文件排除（在 cmd + p, GOTO 命令时加快速度）选项：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;folders&amp;quot;:
    [
        {
            &amp;quot;path&amp;quot;: &amp;quot;path_to_project&amp;quot;,
            &amp;quot;folder_exclude_patterns&amp;quot;: [&amp;quot;img&amp;quot;,&amp;quot;x-library&amp;quot;]
        }

    ],
    &amp;quot;settings&amp;quot;:
    {
        &amp;quot;translate_tabs_to_spaces&amp;quot;: true,
        &amp;quot;tab_size&amp;quot;: 4
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;配置移动化&#34;&gt;配置移动化&lt;/h1&gt;

&lt;p&gt;最好全部定义在 &lt;code&gt;path_to_sublime/Packages/User/&lt;/code&gt; 目录中，然后用一个 repo 保存它们，这样随时可以同步到你的所有设备上，并且不同的操纵系统有不同的文件来进行配置&lt;/p&gt;

&lt;p&gt;也可以使用的方式是link到快盘同步目录自动同步&lt;/p&gt;

&lt;h1 id=&#34;一些资源链接&#34;&gt;一些资源链接：&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://zh.lucida.me/blog/sublime-text-complete-guide/&#34;&gt;Sublime Text 全程指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.jobbole.com/82527/&#34;&gt;Gif多图：我常用的 16 个 Sublime Text 快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sitepoint.com/10-essential-sublime-text-plugins-full-stack-developer/&#34;&gt;10 Essential Sublime Text Plugins for Full-Stack Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/iambibhas/4705378&#34;&gt;Sublime Text 2: Snippet scopes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zhihu.com/topic/19668076&#34;&gt;知乎Sublime Text相关问答&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oschina.net/translate/setting-up-sublime-text-for-python-development&#34;&gt;设置 Sublime Text 的 Python 开发环境&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
  </channel>
</rss>
